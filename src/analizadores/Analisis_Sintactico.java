
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import Arbol.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analisis_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analisis_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analisis_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analisis_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\006\000\002\003\003\000\002\014\005" +
    "\000\002\045\005\000\002\015\007\000\002\015\006\000" +
    "\002\046\005\000\002\004\004\000\002\004\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\023\005\000\002\017\007\000\002" +
    "\017\006\000\002\050\005\000\002\047\003\000\002\005" +
    "\004\000\002\005\003\000\002\020\003\000\002\020\003" +
    "\000\002\021\005\000\002\022\005\000\002\024\006\000" +
    "\002\052\004\000\002\052\003\000\002\051\005\000\002" +
    "\051\005\000\002\051\005\000\002\025\013\000\002\025" +
    "\013\000\002\026\011\000\002\026\011\000\002\026\006" +
    "\000\002\006\004\000\002\006\003\000\002\027\005\000" +
    "\002\007\004\000\002\007\003\000\002\030\005\000\002" +
    "\030\005\000\002\010\004\000\002\010\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\032\005\000\002\011\004\000\002" +
    "\011\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\036\006\000" +
    "\002\035\004\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\004\000\002\035\005\000\002\035\005\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\034\005\000\002\037\011\000" +
    "\002\037\015\000\002\040\011\000\002\041\010\000\002" +
    "\044\013\000\002\044\011\000\002\044\011\000\002\044" +
    "\011\000\002\044\015\000\002\044\011\000\002\044\011" +
    "\000\002\044\013\000\002\043\011\000\002\043\011\000" +
    "\002\043\011\000\002\043\011\000\002\043\011\000\002" +
    "\043\011\000\002\043\011\000\002\043\011\000\002\042" +
    "\007\000\002\042\007\000\002\042\007\000\002\042\007" +
    "\000\002\042\007\000\002\042\007\000\002\042\007\000" +
    "\002\013\007\000\002\013\005\000\002\012\005\000\002" +
    "\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0151\000\006\003\004\004\005\001\002\000\004\002" +
    "\ufffd\001\002\000\006\006\011\012\013\001\002\000\004" +
    "\002\010\001\002\000\004\002\000\001\002\000\004\002" +
    "\001\001\002\000\004\010\u0150\001\002\000\004\012\013" +
    "\001\002\000\006\043\020\136\021\001\002\000\004\006" +
    "\011\001\002\000\004\005\016\001\002\000\004\002\ufffe" +
    "\001\002\000\004\136\u014a\001\002\000\004\113\u0148\001" +
    "\002\000\030\003\040\014\037\016\046\020\023\021\035" +
    "\023\024\025\047\027\032\031\034\053\030\144\025\001" +
    "\002\000\034\003\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\020\ufff0\021\ufff0\023\ufff0\025\ufff0\027\ufff0\031\ufff0\053" +
    "\ufff0\144\ufff0\001\002\000\040\003\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\020\uffe6\021\uffe6\023\uffe6\025\uffe6\027" +
    "\uffe6\031\uffe6\036\uffe6\040\uffe6\053\uffe6\144\uffe6\001\002" +
    "\000\006\053\030\144\072\001\002\000\034\003\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\020\uffec\021\uffec\023\uffec" +
    "\025\uffec\027\uffec\031\uffec\053\uffec\144\uffec\001\002\000" +
    "\034\003\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\020\ufff6" +
    "\021\ufff6\023\ufff6\025\ufff6\027\ufff6\031\ufff6\053\ufff6\144" +
    "\ufff6\001\002\000\034\003\uffef\013\uffef\014\uffef\015\uffef" +
    "\016\uffef\020\uffef\021\uffef\023\uffef\025\uffef\027\uffef\031" +
    "\uffef\053\uffef\144\uffef\001\002\000\016\003\207\054\177" +
    "\055\214\057\212\142\210\143\200\001\002\000\034\003" +
    "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\020\uffed\021\uffed" +
    "\023\uffed\025\uffed\027\uffed\031\uffed\053\uffed\144\uffed\001" +
    "\002\000\006\050\156\051\157\001\002\000\034\003\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\020\uffee\021\uffee\023" +
    "\uffee\025\uffee\027\uffee\031\uffee\053\uffee\144\uffee\001\002" +
    "\000\006\052\112\136\113\001\002\000\006\053\030\144" +
    "\072\001\002\000\034\003\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\020\ufff5\021\ufff5\023\ufff5\025\ufff5\027\ufff5\031" +
    "\ufff5\053\ufff5\144\ufff5\001\002\000\030\003\040\014\037" +
    "\016\046\020\023\021\035\023\024\025\047\027\032\031" +
    "\034\053\030\144\025\001\002\000\034\003\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\020\uffeb\021\uffeb\023\uffeb\025" +
    "\uffeb\027\uffeb\031\uffeb\053\uffeb\144\uffeb\001\002\000\034" +
    "\003\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\020\ufff1\021" +
    "\ufff1\023\ufff1\025\ufff1\027\ufff1\031\ufff1\053\ufff1\144\ufff1" +
    "\001\002\000\034\003\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\020\ufff2\021\ufff2\023\ufff2\025\ufff2\027\ufff2\031\ufff2" +
    "\053\ufff2\144\ufff2\001\002\000\032\003\040\013\105\014" +
    "\037\016\046\020\023\021\035\023\024\025\047\027\032" +
    "\031\034\053\030\144\025\001\002\000\034\003\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3\023\ufff3" +
    "\025\ufff3\027\ufff3\031\ufff3\053\ufff3\144\ufff3\001\002\000" +
    "\034\003\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\020\ufff4" +
    "\021\ufff4\023\ufff4\025\ufff4\027\ufff4\031\ufff4\053\ufff4\144" +
    "\ufff4\001\002\000\006\044\066\136\067\001\002\000\010" +
    "\045\053\046\051\047\050\001\002\000\004\113\064\001" +
    "\002\000\004\113\062\001\002\000\012\045\053\046\051" +
    "\047\050\136\057\001\002\000\004\113\055\001\002\000" +
    "\012\045\uffdd\046\uffdd\047\uffdd\136\uffdd\001\002\000\004" +
    "\141\056\001\002\000\012\045\uffda\046\uffda\047\uffda\136" +
    "\uffda\001\002\000\004\026\061\001\002\000\012\045\uffde" +
    "\046\uffde\047\uffde\136\uffde\001\002\000\040\003\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\020\uffdf\021\uffdf\023\uffdf" +
    "\025\uffdf\027\uffdf\031\uffdf\036\uffdf\040\uffdf\053\uffdf\144" +
    "\uffdf\001\002\000\004\137\063\001\002\000\012\045\uffdc" +
    "\046\uffdc\047\uffdc\136\uffdc\001\002\000\004\137\065\001" +
    "\002\000\012\045\uffdb\046\uffdb\047\uffdb\136\uffdb\001\002" +
    "\000\004\113\102\001\002\000\006\053\030\144\072\001" +
    "\002\000\004\136\071\001\002\000\006\053\030\144\072" +
    "\001\002\000\014\017\uffe3\022\uffe3\024\uffe3\053\uffe3\144" +
    "\uffe3\001\002\000\014\017\uffe2\022\uffe2\024\uffe2\053\uffe2" +
    "\144\uffe2\001\002\000\010\017\076\053\030\144\072\001" +
    "\002\000\014\017\uffe4\022\uffe4\024\uffe4\053\uffe4\144\uffe4" +
    "\001\002\000\040\003\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\020\uffe9\021\uffe9\023\uffe9\025\uffe9\027\uffe9\031\uffe9" +
    "\036\uffe9\040\uffe9\053\uffe9\144\uffe9\001\002\000\014\017" +
    "\uffe5\022\uffe5\024\uffe5\053\uffe5\144\uffe5\001\002\000\010" +
    "\017\101\053\030\144\072\001\002\000\040\003\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\021\uffe8\023\uffe8" +
    "\025\uffe8\027\uffe8\031\uffe8\036\uffe8\040\uffe8\053\uffe8\144" +
    "\uffe8\001\002\000\004\141\103\001\002\000\004\136\uffe7" +
    "\001\002\000\034\003\ufff7\013\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\020\ufff7\021\ufff7\023\ufff7\025\ufff7\027\ufff7\031\ufff7" +
    "\053\ufff7\144\ufff7\001\002\000\006\005\ufff9\006\ufff9\001" +
    "\002\000\032\003\040\014\037\015\107\016\046\020\023" +
    "\021\035\023\024\025\047\027\032\031\034\053\030\144" +
    "\025\001\002\000\040\003\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\020\uffea\021\uffea\023\uffea\025\uffea\027\uffea\031" +
    "\uffea\036\uffea\040\uffea\053\uffea\144\uffea\001\002\000\010" +
    "\022\111\053\030\144\072\001\002\000\034\003\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\021\uffe1\023\uffe1" +
    "\025\uffe1\027\uffe1\031\uffe1\053\uffe1\144\uffe1\001\002\000" +
    "\004\113\145\001\002\000\004\033\114\001\002\000\006" +
    "\035\122\037\123\001\002\000\006\032\uffd3\033\uffd3\001" +
    "\002\000\006\032\120\033\114\001\002\000\006\032\uffd4" +
    "\033\uffd4\001\002\000\034\003\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\020\uffd5\021\uffd5\023\uffd5\025\uffd5\027\uffd5" +
    "\031\uffd5\053\uffd5\144\uffd5\001\002\000\010\034\uffd0\035" +
    "\uffd0\037\uffd0\001\002\000\022\003\134\014\037\016\046" +
    "\020\023\025\047\027\032\053\030\144\131\001\002\000" +
    "\022\003\134\014\037\016\046\020\023\025\047\027\032" +
    "\053\030\144\131\001\002\000\010\034\126\035\122\037" +
    "\123\001\002\000\010\034\uffd1\035\uffd1\037\uffd1\001\002" +
    "\000\006\032\uffd2\033\uffd2\001\002\000\024\003\134\014" +
    "\037\016\046\020\023\025\047\027\032\040\142\053\030" +
    "\144\131\001\002\000\026\003\uffcc\014\uffcc\016\uffcc\020" +
    "\uffcc\025\uffcc\027\uffcc\036\uffcc\040\uffcc\053\uffcc\144\uffcc" +
    "\001\002\000\026\003\uffc6\014\uffc6\016\uffc6\020\uffc6\025" +
    "\uffc6\027\uffc6\036\uffc6\040\uffc6\053\uffc6\144\uffc6\001\002" +
    "\000\026\003\uffca\014\uffca\016\uffca\020\uffca\025\uffca\027" +
    "\uffca\036\uffca\040\uffca\053\uffca\144\uffca\001\002\000\026" +
    "\003\uffcb\014\uffcb\016\uffcb\020\uffcb\025\uffcb\027\uffcb\036" +
    "\uffcb\040\uffcb\053\uffcb\144\uffcb\001\002\000\026\003\uffc4" +
    "\014\uffc4\016\uffc4\020\uffc4\025\uffc4\027\uffc4\036\uffc4\040" +
    "\uffc4\053\uffc4\144\uffc4\001\002\000\026\003\uffc7\014\uffc7" +
    "\016\uffc7\020\uffc7\025\uffc7\027\uffc7\036\uffc7\040\uffc7\053" +
    "\uffc7\144\uffc7\001\002\000\026\003\uffc5\014\uffc5\016\uffc5" +
    "\020\uffc5\025\uffc5\027\uffc5\036\uffc5\040\uffc5\053\uffc5\144" +
    "\uffc5\001\002\000\026\003\uffc8\014\uffc8\016\uffc8\020\uffc8" +
    "\025\uffc8\027\uffc8\036\uffc8\040\uffc8\053\uffc8\144\uffc8\001" +
    "\002\000\026\003\uffc9\014\uffc9\016\uffc9\020\uffc9\025\uffc9" +
    "\027\uffc9\036\uffc9\040\uffc9\053\uffc9\144\uffc9\001\002\000" +
    "\026\003\uffcd\014\uffcd\016\uffcd\020\uffcd\025\uffcd\027\uffcd" +
    "\036\uffcd\040\uffcd\053\uffcd\144\uffcd\001\002\000\010\034" +
    "\uffcf\035\uffcf\037\uffcf\001\002\000\024\003\134\014\037" +
    "\016\046\020\023\025\047\027\032\036\144\053\030\144" +
    "\131\001\002\000\010\034\uffce\035\uffce\037\uffce\001\002" +
    "\000\006\041\147\042\146\001\002\000\004\136\153\001" +
    "\002\000\004\136\150\001\002\000\004\033\114\001\002" +
    "\000\006\032\152\033\114\001\002\000\034\003\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\020\uffd7\021\uffd7\023\uffd7" +
    "\025\uffd7\027\uffd7\031\uffd7\053\uffd7\144\uffd7\001\002\000" +
    "\004\033\114\001\002\000\006\032\155\033\114\001\002" +
    "\000\034\003\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\020" +
    "\uffd6\021\uffd6\023\uffd6\025\uffd6\027\uffd6\031\uffd6\053\uffd6" +
    "\144\uffd6\001\002\000\004\113\167\001\002\000\004\113" +
    "\160\001\002\000\004\141\161\001\002\000\004\050\162" +
    "\001\002\000\004\113\163\001\002\000\004\141\164\001" +
    "\002\000\004\136\165\001\002\000\004\030\166\001\002" +
    "\000\040\003\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\020" +
    "\uffd8\021\uffd8\023\uffd8\025\uffd8\027\uffd8\031\uffd8\036\uffd8" +
    "\040\uffd8\053\uffd8\144\uffd8\001\002\000\004\141\170\001" +
    "\002\000\004\051\171\001\002\000\004\113\172\001\002" +
    "\000\004\141\173\001\002\000\004\136\174\001\002\000" +
    "\004\030\175\001\002\000\040\003\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\020\uffd9\021\uffd9\023\uffd9\025\uffd9\027" +
    "\uffd9\031\uffd9\036\uffd9\040\uffd9\053\uffd9\144\uffd9\001\002" +
    "\000\022\003\uffbf\054\uffbf\055\uffbf\057\uffbf\106\uffbf\122" +
    "\uffbf\142\uffbf\143\uffbf\001\002\000\030\003\227\041\225" +
    "\042\232\110\231\117\223\135\220\137\226\140\222\141" +
    "\224\142\230\143\216\001\002\000\006\113\343\115\342" +
    "\001\002\000\022\003\uffbb\054\uffbb\055\uffbb\057\uffbb\106" +
    "\uffbb\122\uffbb\142\uffbb\143\uffbb\001\002\000\022\003\uffbc" +
    "\054\uffbc\055\uffbc\057\uffbc\106\uffbc\122\uffbc\142\uffbc\143" +
    "\uffbc\001\002\000\022\003\uffba\054\uffba\055\uffba\057\uffba" +
    "\106\uffba\122\uffba\142\uffba\143\uffba\001\002\000\022\003" +
    "\uffc1\054\uffc1\055\uffc1\057\uffc1\106\uffc1\122\uffc1\142\uffc1" +
    "\143\uffc1\001\002\000\022\003\uffbe\054\uffbe\055\uffbe\057" +
    "\uffbe\106\uffbe\122\uffbe\142\uffbe\143\uffbe\001\002\000\022" +
    "\003\uffc0\054\uffc0\055\uffc0\057\uffc0\106\uffc0\122\uffc0\142" +
    "\uffc0\143\uffc0\001\002\000\022\003\uffb9\054\uffb9\055\uffb9" +
    "\057\uffb9\106\uffb9\122\uffb9\142\uffb9\143\uffb9\001\002\000" +
    "\004\113\337\001\002\000\022\003\uffbd\054\uffbd\055\uffbd" +
    "\057\uffbd\106\uffbd\122\uffbd\142\uffbd\143\uffbd\001\002\000" +
    "\004\117\331\001\002\000\020\003\207\054\177\055\214" +
    "\057\212\106\330\142\210\143\200\001\002\000\004\117" +
    "\215\001\002\000\030\003\227\041\225\042\232\110\231" +
    "\117\223\135\220\137\226\140\222\141\224\142\230\143" +
    "\216\001\002\000\004\115\302\001\002\000\036\107\250" +
    "\110\244\111\245\112\234\115\247\120\271\125\236\126" +
    "\237\127\240\130\241\131\246\132\235\133\243\134\242" +
    "\001\002\000\030\003\227\041\225\042\232\110\231\117" +
    "\223\135\220\137\226\140\222\141\224\142\230\143\216" +
    "\001\002\000\044\107\uffa1\110\uffa1\111\uffa1\112\uffa1\114" +
    "\uffa1\115\uffa1\116\uffa1\120\uffa1\124\uffa1\125\uffa1\126\uffa1" +
    "\127\uffa1\130\uffa1\131\uffa1\132\uffa1\133\uffa1\134\uffa1\001" +
    "\002\000\044\107\uffa6\110\uffa6\111\uffa6\112\uffa6\114\uffa6" +
    "\115\uffa6\116\uffa6\120\uffa6\124\uffa6\125\uffa6\126\uffa6\127" +
    "\uffa6\130\uffa6\131\uffa6\132\uffa6\133\uffa6\134\uffa6\001\002" +
    "\000\030\003\227\041\225\042\232\110\231\117\223\135" +
    "\220\137\226\140\222\141\224\142\230\143\216\001\002" +
    "\000\044\107\uffa5\110\uffa5\111\uffa5\112\uffa5\114\uffa5\115" +
    "\uffa5\116\uffa5\120\uffa5\124\uffa5\125\uffa5\126\uffa5\127\uffa5" +
    "\130\uffa5\131\uffa5\132\uffa5\133\uffa5\134\uffa5\001\002\000" +
    "\044\107\uffa3\110\uffa3\111\uffa3\112\uffa3\114\uffa3\115\uffa3" +
    "\116\uffa3\120\uffa3\124\uffa3\125\uffa3\126\uffa3\127\uffa3\130" +
    "\uffa3\131\uffa3\132\uffa3\133\uffa3\134\uffa3\001\002\000\044" +
    "\107\uffa7\110\uffa7\111\uffa7\112\uffa7\114\uffa7\115\uffa7\116" +
    "\uffa7\120\uffa7\124\uffa7\125\uffa7\126\uffa7\127\uffa7\130\uffa7" +
    "\131\uffa7\132\uffa7\133\uffa7\134\uffa7\001\002\000\044\107" +
    "\uffa0\110\uffa0\111\uffa0\112\uffa0\114\uffa0\115\uffa0\116\uffa0" +
    "\120\uffa0\124\uffa0\125\uffa0\126\uffa0\127\uffa0\130\uffa0\131" +
    "\uffa0\132\uffa0\133\uffa0\134\uffa0\001\002\000\044\107\uffa4" +
    "\110\uffa4\111\uffa4\112\uffa4\114\uffa4\115\uffa4\116\uffa4\120" +
    "\uffa4\124\uffa4\125\uffa4\126\uffa4\127\uffa4\130\uffa4\131\uffa4" +
    "\132\uffa4\133\uffa4\134\uffa4\001\002\000\030\003\227\041" +
    "\225\042\232\110\231\117\223\135\220\137\226\140\222" +
    "\141\224\142\230\143\216\001\002\000\044\107\uffa2\110" +
    "\uffa2\111\uffa2\112\uffa2\114\uffa2\115\uffa2\116\uffa2\120\uffa2" +
    "\124\uffa2\125\uffa2\126\uffa2\127\uffa2\130\uffa2\131\uffa2\132" +
    "\uffa2\133\uffa2\134\uffa2\001\002\000\044\107\uffb7\110\uffb7" +
    "\111\uffb7\112\uffb7\114\uffb7\115\uffb7\116\uffb7\120\uffb7\124" +
    "\uffb7\125\uffb7\126\uffb7\127\uffb7\130\uffb7\131\uffb7\132\uffb7" +
    "\133\uffb7\134\uffb7\001\002\000\030\003\227\041\225\042" +
    "\232\110\231\117\223\135\220\137\226\140\222\141\224" +
    "\142\230\143\216\001\002\000\030\003\227\041\225\042" +
    "\232\110\231\117\223\135\220\137\226\140\222\141\224" +
    "\142\230\143\216\001\002\000\030\003\227\041\225\042" +
    "\232\110\231\117\223\135\220\137\226\140\222\141\224" +
    "\142\230\143\216\001\002\000\030\003\227\041\225\042" +
    "\232\110\231\117\223\135\220\137\226\140\222\141\224" +
    "\142\230\143\216\001\002\000\030\003\227\041\225\042" +
    "\232\110\231\117\223\135\220\137\226\140\222\141\224" +
    "\142\230\143\216\001\002\000\030\003\227\041\225\042" +
    "\232\110\231\117\223\135\220\137\226\140\222\141\224" +
    "\142\230\143\216\001\002\000\030\003\227\041\225\042" +
    "\232\110\231\117\223\135\220\137\226\140\222\141\224" +
    "\142\230\143\216\001\002\000\030\003\227\041\225\042" +
    "\232\110\231\117\223\135\220\137\226\140\222\141\224" +
    "\142\230\143\216\001\002\000\030\003\227\041\225\042" +
    "\232\110\231\117\223\135\220\137\226\140\222\141\224" +
    "\142\230\143\216\001\002\000\030\003\227\041\225\042" +
    "\232\110\231\117\223\135\220\137\226\140\222\141\224" +
    "\142\230\143\216\001\002\000\030\003\227\041\225\042" +
    "\232\110\231\117\223\135\220\137\226\140\222\141\224" +
    "\142\230\143\216\001\002\000\030\003\227\041\225\042" +
    "\232\110\231\117\223\135\220\137\226\140\222\141\224" +
    "\142\230\143\216\001\002\000\030\003\227\041\225\042" +
    "\232\110\231\117\223\135\220\137\226\140\222\141\224" +
    "\142\230\143\216\001\002\000\044\107\uffb6\110\uffb6\111" +
    "\245\112\234\114\uffb6\115\uffb6\116\uffb6\120\uffb6\124\uffb6" +
    "\125\uffb6\126\uffb6\127\uffb6\130\uffb6\131\uffb6\132\uffb6\133" +
    "\uffb6\134\uffb6\001\002\000\044\107\250\110\244\111\245" +
    "\112\234\114\uffa9\115\uffa9\116\uffa9\120\uffa9\124\uffa9\125" +
    "\236\126\237\127\240\130\241\131\246\132\235\133\243" +
    "\134\242\001\002\000\044\107\250\110\244\111\245\112" +
    "\234\114\uffac\115\uffac\116\uffac\120\uffac\124\uffac\125\uffac" +
    "\126\uffac\127\uffac\130\uffac\131\uffac\132\uffac\133\uffac\134" +
    "\uffac\001\002\000\044\107\uffb4\110\uffb4\111\uffb4\112\uffb4" +
    "\114\uffb4\115\uffb4\116\uffb4\120\uffb4\124\uffb4\125\uffb4\126" +
    "\uffb4\127\uffb4\130\uffb4\131\uffb4\132\uffb4\133\uffb4\134\uffb4" +
    "\001\002\000\044\107\uffb5\110\uffb5\111\245\112\234\114" +
    "\uffb5\115\uffb5\116\uffb5\120\uffb5\124\uffb5\125\uffb5\126\uffb5" +
    "\127\uffb5\130\uffb5\131\uffb5\132\uffb5\133\uffb5\134\uffb5\001" +
    "\002\000\044\107\250\110\244\111\245\112\234\114\uffae" +
    "\115\uffae\116\uffae\120\uffae\124\uffae\125\236\126\237\127" +
    "\240\130\241\131\246\132\235\133\uffae\134\uffae\001\002" +
    "\000\044\107\250\110\244\111\245\112\234\114\uffad\115" +
    "\uffad\116\uffad\120\uffad\124\uffad\125\236\126\237\127\240" +
    "\130\241\131\246\132\235\133\243\134\uffad\001\002\000" +
    "\044\107\250\110\244\111\245\112\234\114\uffb1\115\uffb1" +
    "\116\uffb1\120\uffb1\124\uffb1\125\uffb1\126\uffb1\127\uffb1\130" +
    "\uffb1\131\uffb1\132\uffb1\133\uffb1\134\uffb1\001\002\000\044" +
    "\107\250\110\244\111\245\112\234\114\uffb2\115\uffb2\116" +
    "\uffb2\120\uffb2\124\uffb2\125\uffb2\126\uffb2\127\uffb2\130\uffb2" +
    "\131\uffb2\132\uffb2\133\uffb2\134\uffb2\001\002\000\044\107" +
    "\250\110\244\111\245\112\234\114\uffaf\115\uffaf\116\uffaf" +
    "\120\uffaf\124\uffaf\125\uffaf\126\uffaf\127\uffaf\130\uffaf\131" +
    "\uffaf\132\uffaf\133\uffaf\134\uffaf\001\002\000\044\107\250" +
    "\110\244\111\245\112\234\114\uffb0\115\uffb0\116\uffb0\120" +
    "\uffb0\124\uffb0\125\uffb0\126\uffb0\127\uffb0\130\uffb0\131\uffb0" +
    "\132\uffb0\133\uffb0\134\uffb0\001\002\000\044\107\250\110" +
    "\244\111\245\112\234\114\uffab\115\uffab\116\uffab\120\uffab" +
    "\124\uffab\125\uffab\126\uffab\127\uffab\130\uffab\131\uffab\132" +
    "\uffab\133\uffab\134\uffab\001\002\000\044\107\uffb3\110\uffb3" +
    "\111\uffb3\112\uffb3\114\uffb3\115\uffb3\116\uffb3\120\uffb3\124" +
    "\uffb3\125\uffb3\126\uffb3\127\uffb3\130\uffb3\131\uffb3\132\uffb3" +
    "\133\uffb3\134\uffb3\001\002\000\036\107\250\110\244\111" +
    "\245\112\234\115\247\120\267\125\236\126\237\127\240" +
    "\130\241\131\246\132\235\133\243\134\242\001\002\000" +
    "\044\107\uffa8\110\uffa8\111\uffa8\112\uffa8\114\uffa8\115\uffa8" +
    "\116\uffa8\120\uffa8\124\uffa8\125\uffa8\126\uffa8\127\uffa8\130" +
    "\uffa8\131\uffa8\132\uffa8\133\uffa8\134\uffa8\001\002\000\044" +
    "\107\250\110\244\111\245\112\234\114\uffaa\115\uffaa\116" +
    "\uffaa\120\uffaa\124\uffaa\125\236\126\237\127\240\130\241" +
    "\131\246\132\235\133\uffaa\134\uffaa\001\002\000\004\121" +
    "\272\001\002\000\016\003\207\054\177\055\214\057\212" +
    "\142\210\143\200\001\002\000\020\003\207\054\177\055" +
    "\214\057\212\122\275\142\210\143\200\001\002\000\022" +
    "\003\uffc2\054\uffc2\055\uffc2\057\uffc2\106\uffc2\122\uffc2\142" +
    "\uffc2\143\uffc2\001\002\000\024\003\uff9e\054\uff9e\055\uff9e" +
    "\056\276\057\uff9e\106\uff9e\122\uff9e\142\uff9e\143\uff9e\001" +
    "\002\000\004\121\277\001\002\000\016\003\207\054\177" +
    "\055\214\057\212\142\210\143\200\001\002\000\020\003" +
    "\207\054\177\055\214\057\212\122\301\142\210\143\200" +
    "\001\002\000\022\003\uff9d\054\uff9d\055\uff9d\057\uff9d\106" +
    "\uff9d\122\uff9d\142\uff9d\143\uff9d\001\002\000\020\063\306" +
    "\065\303\072\311\074\307\076\304\101\305\104\310\001" +
    "\002\000\004\117\326\001\002\000\004\117\324\001\002" +
    "\000\004\117\322\001\002\000\004\117\320\001\002\000" +
    "\004\117\316\001\002\000\004\117\314\001\002\000\004" +
    "\117\312\001\002\000\004\120\313\001\002\000\044\107" +
    "\uff88\110\uff88\111\uff88\112\uff88\114\uff88\115\uff88\116\uff88" +
    "\120\uff88\124\uff88\125\uff88\126\uff88\127\uff88\130\uff88\131" +
    "\uff88\132\uff88\133\uff88\134\uff88\001\002\000\004\120\315" +
    "\001\002\000\044\107\uff84\110\uff84\111\uff84\112\uff84\114" +
    "\uff84\115\uff84\116\uff84\120\uff84\124\uff84\125\uff84\126\uff84" +
    "\127\uff84\130\uff84\131\uff84\132\uff84\133\uff84\134\uff84\001" +
    "\002\000\004\120\317\001\002\000\044\107\uff87\110\uff87" +
    "\111\uff87\112\uff87\114\uff87\115\uff87\116\uff87\120\uff87\124" +
    "\uff87\125\uff87\126\uff87\127\uff87\130\uff87\131\uff87\132\uff87" +
    "\133\uff87\134\uff87\001\002\000\004\120\321\001\002\000" +
    "\044\107\uff8a\110\uff8a\111\uff8a\112\uff8a\114\uff8a\115\uff8a" +
    "\116\uff8a\120\uff8a\124\uff8a\125\uff8a\126\uff8a\127\uff8a\130" +
    "\uff8a\131\uff8a\132\uff8a\133\uff8a\134\uff8a\001\002\000\004" +
    "\120\323\001\002\000\044\107\uff85\110\uff85\111\uff85\112" +
    "\uff85\114\uff85\115\uff85\116\uff85\120\uff85\124\uff85\125\uff85" +
    "\126\uff85\127\uff85\130\uff85\131\uff85\132\uff85\133\uff85\134" +
    "\uff85\001\002\000\004\120\325\001\002\000\044\107\uff86" +
    "\110\uff86\111\uff86\112\uff86\114\uff86\115\uff86\116\uff86\120" +
    "\uff86\124\uff86\125\uff86\126\uff86\127\uff86\130\uff86\131\uff86" +
    "\132\uff86\133\uff86\134\uff86\001\002\000\004\120\327\001" +
    "\002\000\044\107\uff89\110\uff89\111\uff89\112\uff89\114\uff89" +
    "\115\uff89\116\uff89\120\uff89\124\uff89\125\uff89\126\uff89\127" +
    "\uff89\130\uff89\131\uff89\132\uff89\133\uff89\134\uff89\001\002" +
    "\000\046\003\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\027\uffc3\031\uffc3\036\uffc3\040\uffc3\053\uffc3\144\uffc3\001" +
    "\002\000\030\003\227\041\225\042\232\110\231\117\223" +
    "\135\220\137\226\140\222\141\224\142\230\143\216\001" +
    "\002\000\036\107\250\110\244\111\245\112\234\115\247" +
    "\120\333\125\236\126\237\127\240\130\241\131\246\132" +
    "\235\133\243\134\242\001\002\000\004\121\334\001\002" +
    "\000\016\003\207\054\177\055\214\057\212\142\210\143" +
    "\200\001\002\000\020\003\207\054\177\055\214\057\212" +
    "\122\336\142\210\143\200\001\002\000\022\003\uff9c\054" +
    "\uff9c\055\uff9c\057\uff9c\106\uff9c\122\uff9c\142\uff9c\143\uff9c" +
    "\001\002\000\030\003\227\041\225\042\232\110\231\117" +
    "\223\135\220\137\226\140\222\141\224\142\230\143\216" +
    "\001\002\000\036\107\250\110\244\111\245\112\234\115" +
    "\247\116\341\125\236\126\237\127\240\130\241\131\246" +
    "\132\235\133\243\134\242\001\002\000\022\003\uffb8\054" +
    "\uffb8\055\uffb8\057\uffb8\106\uffb8\122\uffb8\142\uffb8\143\uffb8" +
    "\001\002\000\024\060\u0119\062\u011f\064\u011e\071\u011a\073" +
    "\u011c\075\u011b\100\u0118\103\u0120\105\u011d\001\002\000\016" +
    "\061\350\066\347\067\346\070\345\077\351\102\344\001" +
    "\002\000\004\117\u0112\001\002\000\004\117\u0108\001\002" +
    "\000\004\117\u0104\001\002\000\004\117\u0100\001\002\000" +
    "\004\117\370\001\002\000\004\117\352\001\002\000\004" +
    "\123\353\001\002\000\030\003\227\041\225\042\232\110" +
    "\231\117\223\135\220\137\226\140\222\141\224\142\230" +
    "\143\216\001\002\000\006\114\355\120\356\001\002\000" +
    "\004\123\360\001\002\000\004\116\357\001\002\000\022" +
    "\003\uff94\054\uff94\055\uff94\057\uff94\106\uff94\122\uff94\142" +
    "\uff94\143\uff94\001\002\000\030\003\227\041\225\042\232" +
    "\110\231\117\223\135\220\137\226\140\222\141\224\142" +
    "\230\143\216\001\002\000\040\107\250\110\244\111\245" +
    "\112\234\114\uff80\115\247\124\uff80\125\236\126\237\127" +
    "\240\130\241\131\246\132\235\133\243\134\242\001\002" +
    "\000\006\114\364\124\363\001\002\000\006\114\uff83\120" +
    "\uff83\001\002\000\030\003\227\041\225\042\232\110\231" +
    "\117\223\135\220\137\226\140\222\141\224\142\230\143" +
    "\216\001\002\000\040\107\250\110\244\111\245\112\234" +
    "\114\uff81\115\247\124\uff81\125\236\126\237\127\240\130" +
    "\241\131\246\132\235\133\243\134\242\001\002\000\006" +
    "\114\364\124\367\001\002\000\006\114\uff82\120\uff82\001" +
    "\002\000\030\003\227\041\225\042\232\110\231\117\223" +
    "\135\220\137\226\140\222\141\224\142\230\143\216\001" +
    "\002\000\040\107\250\110\244\111\245\112\234\114\372" +
    "\115\247\120\373\125\236\126\237\127\240\130\241\131" +
    "\246\132\235\133\243\134\242\001\002\000\030\003\227" +
    "\041\225\042\232\110\231\117\223\135\220\137\226\140" +
    "\222\141\224\142\230\143\216\001\002\000\004\116\374" +
    "\001\002\000\022\003\uff99\054\uff99\055\uff99\057\uff99\106" +
    "\uff99\122\uff99\142\uff99\143\uff99\001\002\000\036\107\250" +
    "\110\244\111\245\112\234\115\247\120\376\125\236\126" +
    "\237\127\240\130\241\131\246\132\235\133\243\134\242" +
    "\001\002\000\004\116\377\001\002\000\022\003\uff9a\054" +
    "\uff9a\055\uff9a\057\uff9a\106\uff9a\122\uff9a\142\uff9a\143\uff9a" +
    "\001\002\000\030\003\227\041\225\042\232\110\231\117" +
    "\223\135\220\137\226\140\222\141\224\142\230\143\216" +
    "\001\002\000\036\107\250\110\244\111\245\112\234\115" +
    "\247\120\u0102\125\236\126\237\127\240\130\241\131\246" +
    "\132\235\133\243\134\242\001\002\000\004\116\u0103\001" +
    "\002\000\022\003\uff98\054\uff98\055\uff98\057\uff98\106\uff98" +
    "\122\uff98\142\uff98\143\uff98\001\002\000\030\003\227\041" +
    "\225\042\232\110\231\117\223\135\220\137\226\140\222" +
    "\141\224\142\230\143\216\001\002\000\036\107\250\110" +
    "\244\111\245\112\234\115\247\120\u0106\125\236\126\237" +
    "\127\240\130\241\131\246\132\235\133\243\134\242\001" +
    "\002\000\004\116\u0107\001\002\000\022\003\uff97\054\uff97" +
    "\055\uff97\057\uff97\106\uff97\122\uff97\142\uff97\143\uff97\001" +
    "\002\000\030\003\227\041\225\042\232\110\231\117\223" +
    "\135\220\137\226\140\222\141\224\142\230\143\216\001" +
    "\002\000\040\107\250\110\244\111\245\112\234\114\u010a" +
    "\115\247\120\u010b\125\236\126\237\127\240\130\241\131" +
    "\246\132\235\133\243\134\242\001\002\000\030\003\227" +
    "\041\225\042\232\110\231\117\223\135\220\137\226\140" +
    "\222\141\224\142\230\143\216\001\002\000\004\116\u010c" +
    "\001\002\000\022\003\uff95\054\uff95\055\uff95\057\uff95\106" +
    "\uff95\122\uff95\142\uff95\143\uff95\001\002\000\036\107\250" +
    "\110\244\111\245\112\234\114\u010e\115\247\125\236\126" +
    "\237\127\240\130\241\131\246\132\235\133\243\134\242" +
    "\001\002\000\030\003\227\041\225\042\232\110\231\117" +
    "\223\135\220\137\226\140\222\141\224\142\230\143\216" +
    "\001\002\000\036\107\250\110\244\111\245\112\234\115" +
    "\247\120\u0110\125\236\126\237\127\240\130\241\131\246" +
    "\132\235\133\243\134\242\001\002\000\004\116\u0111\001" +
    "\002\000\022\003\uff96\054\uff96\055\uff96\057\uff96\106\uff96" +
    "\122\uff96\142\uff96\143\uff96\001\002\000\030\003\227\041" +
    "\225\042\232\110\231\117\223\135\220\137\226\140\222" +
    "\141\224\142\230\143\216\001\002\000\036\107\250\110" +
    "\244\111\245\112\234\114\u0114\115\247\125\236\126\237" +
    "\127\240\130\241\131\246\132\235\133\243\134\242\001" +
    "\002\000\030\003\227\041\225\042\232\110\231\117\223" +
    "\135\220\137\226\140\222\141\224\142\230\143\216\001" +
    "\002\000\036\107\250\110\244\111\245\112\234\115\247" +
    "\120\u0116\125\236\126\237\127\240\130\241\131\246\132" +
    "\235\133\243\134\242\001\002\000\004\116\u0117\001\002" +
    "\000\022\003\uff93\054\uff93\055\uff93\057\uff93\106\uff93\122" +
    "\uff93\142\uff93\143\uff93\001\002\000\004\117\u0140\001\002" +
    "\000\004\117\u013d\001\002\000\004\117\u0139\001\002\000" +
    "\004\117\u0135\001\002\000\004\117\u0131\001\002\000\004" +
    "\117\u012d\001\002\000\004\117\u0129\001\002\000\004\117" +
    "\u0125\001\002\000\004\117\u0121\001\002\000\030\003\227" +
    "\041\225\042\232\110\231\117\223\135\220\137\226\140" +
    "\222\141\224\142\230\143\216\001\002\000\036\107\250" +
    "\110\244\111\245\112\234\115\247\120\u0123\125\236\126" +
    "\237\127\240\130\241\131\246\132\235\133\243\134\242" +
    "\001\002\000\004\116\u0124\001\002\000\022\003\uff8c\054" +
    "\uff8c\055\uff8c\057\uff8c\106\uff8c\122\uff8c\142\uff8c\143\uff8c" +
    "\001\002\000\030\003\227\041\225\042\232\110\231\117" +
    "\223\135\220\137\226\140\222\141\224\142\230\143\216" +
    "\001\002\000\036\107\250\110\244\111\245\112\234\115" +
    "\247\120\u0127\125\236\126\237\127\240\130\241\131\246" +
    "\132\235\133\243\134\242\001\002\000\004\116\u0128\001" +
    "\002\000\022\003\uff92\054\uff92\055\uff92\057\uff92\106\uff92" +
    "\122\uff92\142\uff92\143\uff92\001\002\000\030\003\227\041" +
    "\225\042\232\110\231\117\223\135\220\137\226\140\222" +
    "\141\224\142\230\143\216\001\002\000\036\107\250\110" +
    "\244\111\245\112\234\115\247\120\u012b\125\236\126\237" +
    "\127\240\130\241\131\246\132\235\133\243\134\242\001" +
    "\002\000\004\116\u012c\001\002\000\022\003\uff91\054\uff91" +
    "\055\uff91\057\uff91\106\uff91\122\uff91\142\uff91\143\uff91\001" +
    "\002\000\030\003\227\041\225\042\232\110\231\117\223" +
    "\135\220\137\226\140\222\141\224\142\230\143\216\001" +
    "\002\000\036\107\250\110\244\111\245\112\234\115\247" +
    "\120\u012f\125\236\126\237\127\240\130\241\131\246\132" +
    "\235\133\243\134\242\001\002\000\004\116\u0130\001\002" +
    "\000\022\003\uff8b\054\uff8b\055\uff8b\057\uff8b\106\uff8b\122" +
    "\uff8b\142\uff8b\143\uff8b\001\002\000\030\003\227\041\225" +
    "\042\232\110\231\117\223\135\220\137\226\140\222\141" +
    "\224\142\230\143\216\001\002\000\036\107\250\110\244" +
    "\111\245\112\234\115\247\120\u0133\125\236\126\237\127" +
    "\240\130\241\131\246\132\235\133\243\134\242\001\002" +
    "\000\004\116\u0134\001\002\000\022\003\uff8f\054\uff8f\055" +
    "\uff8f\057\uff8f\106\uff8f\122\uff8f\142\uff8f\143\uff8f\001\002" +
    "\000\030\003\227\041\225\042\232\110\231\117\223\135" +
    "\220\137\226\140\222\141\224\142\230\143\216\001\002" +
    "\000\036\107\250\110\244\111\245\112\234\115\247\120" +
    "\u0137\125\236\126\237\127\240\130\241\131\246\132\235" +
    "\133\243\134\242\001\002\000\004\116\u0138\001\002\000" +
    "\022\003\uff8e\054\uff8e\055\uff8e\057\uff8e\106\uff8e\122\uff8e" +
    "\142\uff8e\143\uff8e\001\002\000\030\003\227\041\225\042" +
    "\232\110\231\117\223\135\220\137\226\140\222\141\224" +
    "\142\230\143\216\001\002\000\036\107\250\110\244\111" +
    "\245\112\234\115\247\120\u013b\125\236\126\237\127\240" +
    "\130\241\131\246\132\235\133\243\134\242\001\002\000" +
    "\004\116\u013c\001\002\000\022\003\uff90\054\uff90\055\uff90" +
    "\057\uff90\106\uff90\122\uff90\142\uff90\143\uff90\001\002\000" +
    "\004\120\u013e\001\002\000\004\116\u013f\001\002\000\022" +
    "\003\uff9b\054\uff9b\055\uff9b\057\uff9b\106\uff9b\122\uff9b\142" +
    "\uff9b\143\uff9b\001\002\000\030\003\227\041\225\042\232" +
    "\110\231\117\223\135\220\137\226\140\222\141\224\142" +
    "\230\143\216\001\002\000\036\107\250\110\244\111\245" +
    "\112\234\115\247\120\u0142\125\236\126\237\127\240\130" +
    "\241\131\246\132\235\133\243\134\242\001\002\000\004" +
    "\116\u0143\001\002\000\022\003\uff8d\054\uff8d\055\uff8d\057" +
    "\uff8d\106\uff8d\122\uff8d\142\uff8d\143\uff8d\001\002\000\036" +
    "\107\250\110\244\111\245\112\234\115\247\116\u0145\125" +
    "\236\126\237\127\240\130\241\131\246\132\235\133\243" +
    "\134\242\001\002\000\022\003\uff9f\054\uff9f\055\uff9f\057" +
    "\uff9f\106\uff9f\122\uff9f\142\uff9f\143\uff9f\001\002\000\010" +
    "\024\u0147\053\030\144\072\001\002\000\034\003\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0\021\uffe0\023\uffe0" +
    "\025\uffe0\027\uffe0\031\uffe0\053\uffe0\144\uffe0\001\002\000" +
    "\004\141\u0149\001\002\000\004\136\ufff8\001\002\000\030" +
    "\003\040\014\037\016\046\020\023\021\035\023\024\025" +
    "\047\027\032\031\034\053\030\144\025\001\002\000\032" +
    "\003\040\013\u014c\014\037\016\046\020\023\021\035\023" +
    "\024\025\047\027\032\031\034\053\030\144\025\001\002" +
    "\000\006\005\ufffa\006\ufffa\001\002\000\004\005\u014e\001" +
    "\002\000\004\002\uffff\001\002\000\004\007\u0153\001\002" +
    "\000\004\144\u0151\001\002\000\004\011\u0152\001\002\000" +
    "\004\007\ufffb\001\002\000\006\005\ufffc\012\ufffc\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0151\000\006\002\005\003\006\001\001\000\002\001" +
    "\001\000\006\014\011\015\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\u014e\001" +
    "\001\000\004\015\u014c\001\001\000\004\046\016\001\001" +
    "\000\004\014\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\042" +
    "\016\025\017\035\021\041\022\040\023\044\024\021\025" +
    "\026\026\032\032\030\047\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\u0145\020\074\032\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\011\212\033\203\034\175\036\205\037\204\040" +
    "\210\041\201\043\200\044\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\107\020\074\032\072\001\001\000\002\001\001" +
    "\000\030\004\105\016\025\017\035\021\041\022\040\023" +
    "\044\024\021\025\026\026\032\032\030\047\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\016\103\017\035\021\041\022\040\023\044\024\021" +
    "\025\026\026\032\032\030\047\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\067\001\001\000\006" +
    "\051\053\052\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\077\020\074\032\072\001\001" +
    "\000\002\001\001\000\010\005\073\020\074\032\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\076" +
    "\032\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\076\032\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\016\103\017\035\021\041" +
    "\022\040\023\044\024\021\025\026\026\032\032\030\047" +
    "\043\001\001\000\002\001\001\000\006\020\076\032\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\115\027\114\001\001\000\006\007\123\030\120\001\001" +
    "\000\002\001\001\000\004\027\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\010\142" +
    "\017\137\023\131\024\136\025\134\031\127\032\135\047" +
    "\132\001\001\000\022\010\126\017\137\023\131\024\136" +
    "\025\134\031\127\032\135\047\132\001\001\000\004\030" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\017\137\023\131\024\136\025\134\031\140\032\135\047" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\017\137\023" +
    "\131\024\136\025\134\031\140\032\135\047\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\150\027\114\001\001\000\004" +
    "\027\116\001\001\000\002\001\001\000\006\006\153\027" +
    "\114\001\001\000\004\027\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\u0143\042\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\033\273\034\175\036\205\037\204" +
    "\040\210\041\201\043\200\044\202\001\001\000\002\001" +
    "\001\000\006\035\216\042\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\035\267\042\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\035\265\042\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\232" +
    "\042\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\035\264\042\220\001\001\000\006\035\263\042\220" +
    "\001\001\000\006\035\262\042\220\001\001\000\006\035" +
    "\261\042\220\001\001\000\006\035\260\042\220\001\001" +
    "\000\006\035\257\042\220\001\001\000\006\035\256\042" +
    "\220\001\001\000\006\035\255\042\220\001\001\000\006" +
    "\035\254\042\220\001\001\000\006\035\253\042\220\001" +
    "\001\000\006\035\252\042\220\001\001\000\006\035\251" +
    "\042\220\001\001\000\006\035\250\042\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\011\272\033\203\034\175\036\205\037" +
    "\204\040\210\041\201\043\200\044\202\001\001\000\022" +
    "\033\273\034\175\036\205\037\204\040\210\041\201\043" +
    "\200\044\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\011\277\033\203\034\175\036" +
    "\205\037\204\040\210\041\201\043\200\044\202\001\001" +
    "\000\022\033\273\034\175\036\205\037\204\040\210\041" +
    "\201\043\200\044\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\035\331\042\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\011\334\033\203\034\175\036\205\037" +
    "\204\040\210\041\201\043\200\044\202\001\001\000\022" +
    "\033\273\034\175\036\205\037\204\040\210\041\201\043" +
    "\200\044\202\001\001\000\002\001\001\000\006\035\337" +
    "\042\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\353\001\001\000\010" +
    "\012\365\035\360\042\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\361\035\360\042\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\035\364\042\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\370\042\220\001\001\000\002\001\001" +
    "\000\006\035\374\042\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\u0100\042\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\u0104" +
    "\042\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\u0108\042\220\001\001\000\002" +
    "\001\001\000\006\035\u010c\042\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\u010e" +
    "\042\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\u0112\042\220\001\001\000\002" +
    "\001\001\000\006\035\u0114\042\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\035\u0121\042\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\u0125\042\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\035\u0129\042\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\u012d\042\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\035\u0131\042" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\u0135\042\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\u0139" +
    "\042\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\u0140\042\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\076\032\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\u014a\016\025\017\035\021\041\022\040\023\044\024" +
    "\021\025\026\026\032\032\030\047\043\001\001\000\026" +
    "\016\103\017\035\021\041\022\040\023\044\024\021\025" +
    "\026\026\032\032\030\047\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analisis_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analisis_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analisis_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Arbol AST;
    public Arbol getAST(){
       	return AST;
    }
    Errores err=new Errores();
    public Errores getErrors(){
        return err;
    }
    public void syntax_error(Symbol s)
    {
		try{
			String lexema = s.value.toString();
			int fila = s.right+1;
			int columna = s.left+1;
			int tipo = s.sym;

			System.out.println("Error sintáctico recuperado");
			System.out.println("Lexema:"+lexema);
			System.out.println("Fila:"+fila);
			System.out.println("Columna:"+columna);
			System.out.println("tipo:"+tipo);
			err.addE("SINTACTICO", lexema, fila, columna);
		}catch(NullPointerException ex){}
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
       	try{
            String lexema = s.value.toString();
            int fila = s.right+1;
            int columna = s.left+1;
            int tipo = s.sym;

            System.out.println("Error sintáctico NO recuperado");
            System.out.println("Lexema:"+lexema);
            System.out.println("Fila:"+fila);
            System.out.println("Columna:"+columna);
            System.out.println("tipo:"+tipo);
       	}catch(NullPointerException ex){}
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analisis_Sintactico$actions {




  private final Analisis_Sintactico parser;

  /** Constructor */
  CUP$Analisis_Sintactico$actions(Analisis_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action_part00000000(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analisis_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analisis_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analisis_Sintactico$parser.done_parsing();
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= COMPI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		parser.AST=new Arbol(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // COMPI ::= com_a CABECERA CUERPO com_c 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new LinkedList<>();RESULT.add(a);RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COMPI",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // COMPI ::= com_a CUERPO CABECERA com_c 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new LinkedList<>();RESULT.add(a);RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COMPI",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // COMPI ::= error 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COMPI",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CABECERA ::= cab_a TITULO cab_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Titulo(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CABECERA",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TITULO ::= tit_a texto tit_c 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new String(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TITULO",35, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= cue_a FONDO cie ALLS cue_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Cuerpo(a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= cue_a cie ALLS cue_c 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Cuerpo(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FONDO ::= fond igu cad 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FONDO",36, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ALLS ::= ALLS ALL 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALLS",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ALLS ::= ALL 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>();RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALLS",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ALL ::= PARRAFO 
            {
              Instruccion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion p = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=p;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ALL ::= ESPACIO 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=e;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ALL ::= SALTO 
            {
              Instruccion RESULT =null;
		RESULT=new Salto();
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ALL ::= TEXTOA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ALL ::= TEXTOB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ALL ::= IMAGEN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ALL ::= BOTTON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ALL ::= TABLA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ALL ::= SCRIPT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ALL ::= texto 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Texto(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ALL ::= error 
            {
              Instruccion RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ESPACIO ::= esp_a ALLS esp_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Espacio(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ESPACIO",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARRAFO ::= par_a ALIGN cie TESHS par_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Parrafo(a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("PARRAFO",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARRAFO ::= par_a cie TESHS par_c 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Parrafo(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("PARRAFO",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ALIGN ::= alin igu cad 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALIGN",38, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SALTO ::= salt 
            {
              String RESULT =null;
		/*YA ESTA HECHO*/
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SALTO",37, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TESHS ::= TESHS TESH 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TESHS",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TESHS ::= TESH 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>();RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TESHS",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TESH ::= texto 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Texto(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TESH",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TESH ::= SCRIPT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TESH",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TEXTOA ::= tea_a TESHS tea_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new TextoA(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTOA",15, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TEXTOB ::= teb_a TESHS teb_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new TextoB(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTOB",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IMAGEN ::= ima_a IMGS cie ima_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Imagen(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IMGS ::= IMGS IMG 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMGS",40, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IMGS ::= IMG 
            {
              LinkedList<String> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>();RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMGS",40, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IMG ::= alto igu num 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT="3"+a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMG",39, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IMG ::= anch igu num 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT="2"+a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMG",39, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IMG ::= path igu cad 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT="1"+a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMG",39, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BOTTON ::= bot_a ide igu cad text igu cad cie bot_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Boton(a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("BOTTON",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BOTTON ::= bot_a text igu cad ide igu cad cie bot_c 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Boton(a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("BOTTON",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TABLA ::= tab_a bord igu tru cie FILAS tab_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Tabla(true,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TABLA",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TABLA ::= tab_a bord igu fals cie FILAS tab_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Tabla(false,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TABLA",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TABLA ::= tab_a cie FILAS tab_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Tabla(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TABLA",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FILAS ::= FILAS FILA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FILAS",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FILAS ::= FILA 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>();RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FILAS",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FILA ::= fil_a COLUMNS fil_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Fila(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FILA",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COLUMNS ::= COLUMNS COLUMN 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COLUMNS",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COLUMNS ::= COLUMN 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>();RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COLUMNS",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COLUMN ::= col_a DATAS col_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Columna(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COLUMN",22, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COLUMN ::= colc_a DATAS colc_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Columna(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COLUMN",22, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DATAS ::= DATAS DATA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATAS",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DATAS ::= DATA 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>();RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATAS",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DATA ::= SALTO 
            {
              Instruccion RESULT =null;
		RESULT=new Salto();
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATA",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DATA ::= ESPACIO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATA",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DATA ::= PARRAFO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATA",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DATA ::= IMAGEN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATA",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DATA ::= BOTTON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATA",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DATA ::= texto 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Texto(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATA",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DATA ::= SCRIPT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATA",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DATA ::= error 
            {
              Instruccion RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATA",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SCRIPT ::= hs_a SENTS hs_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Script(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SCRIPT",24, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTS ::= SENTS SENT 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTS",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTS ::= SENT 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>();RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTS",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENT ::= DECL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENT ::= ECHO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENT ::= IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENT ::= REPETIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENT ::= INSERTAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENT ::= SET_PART 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENT ::= CRE_PART 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENT ::= error 
            {
              Instruccion RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECL ::= idvar igu OPER pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Declaracion(a,b,aright+1,aleft+1);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECL",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPER ::= men OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.NEG,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPER ::= OPER mas OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.SUMA,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPER ::= OPER men OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.RESTA,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPER ::= OPER por OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.MULT,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPER ::= OPER div OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.DIV,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPER ::= OPER les OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.MEN,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPER ::= OPER gre OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.MAY,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPER ::= OPER lesigu OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.MENIGU,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPER ::= OPER greigu OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.MAYIGU,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPER ::= OPER and OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.AND,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPER ::= OPER or OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.OR,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPER ::= OPER diff OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.DIFF,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPER ::= OPER igua OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.IGU,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPER ::= not OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.NOT,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPER ::= OPER pun OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.CONCAT,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPER ::= parA OPER parC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPER ::= num 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Integer.valueOf(a));
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPER ::= dec 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Double.valueOf(a));
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPER ::= cad 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.CAD,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPER ::= idvar 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.ID,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPER ::= tru 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.TRUE,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPER ::= fals 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.FALSE,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPER ::= GET_PART 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPER ::= error 
            {
              Instruccion RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ECHO ::= echo OPER pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Echo(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ECHO",26, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IF ::= ife parA OPER parC llavA SENTS llavC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new If_Sent(a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IF",29, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IF ::= ife parA OPER parC llavA SENTS llavC elsee llavA SENTS llavC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new If_Sent(a,b,c);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IF",29, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // REPETIR ::= repet parA OPER parC llavA SENTS llavC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Repetir(a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",30, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INSERTAR ::= idobj pun inser parA parC pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		RESULT=new Insertar(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INSERTAR",31, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CRE_PART ::= idobj igu cre_par parA OPER coma OPER parC pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Create_Part(Create_Part.Accion.CRE_PARR1,a,b,c);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CRE_PART",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CRE_PART ::= idobj igu cre_par parA OPER parC pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Create_Part(Create_Part.Accion.CRE_PARR2,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CRE_PART",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CRE_PART ::= idobj igu cre_tea parA OPER parC pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Create_Part(Create_Part.Accion.CRE_TEA,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CRE_PART",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CRE_PART ::= idobj igu cre_teb parA OPER parC pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Create_Part(Create_Part.Accion.CRE_TEB,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CRE_PART",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CRE_PART ::= idobj igu cre_img parA OPER coma OPER coma OPER parC pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Create_Part(Create_Part.Accion.CRE_IMG1,a,b,c,d);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CRE_PART",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CRE_PART ::= idobj igu cre_img parA OPER parC pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Create_Part(Create_Part.Accion.CRE_IMG2,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CRE_PART",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CRE_PART ::= idobj igu cre_tab parA ARRAYS parC pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Create_Part(Create_Part.Accion.CRE_TAB,a,new Lines(b));
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CRE_PART",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CRE_PART ::= idobj igu cre_bot parA OPER coma OPER parC pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Create_Part(Create_Part.Accion.CRE_BOT,a,b,c);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CRE_PART",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SET_PART ::= idobj pun setA parA OPER parC pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Set_Part(Set_Part.Accion.SET_ALI,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SET_PART",33, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SET_PART ::= idobj pun setC parA OPER parC pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Set_Part(Set_Part.Accion.SET_C,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SET_PART",33, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SET_PART ::= idobj pun setP parA OPER parC pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Set_Part(Set_Part.Accion.SET_P,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SET_PART",33, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SET_PART ::= idobj pun setAl parA OPER parC pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Set_Part(Set_Part.Accion.SET_AL,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SET_PART",33, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SET_PART ::= idobj pun setAn parA OPER parC pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Set_Part(Set_Part.Accion.SET_AN,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SET_PART",33, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SET_PART ::= idobj pun setBo parA OPER parC pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Set_Part(Set_Part.Accion.SET_B,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SET_PART",33, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SET_PART ::= idobj pun setT parA OPER parC pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Set_Part(Set_Part.Accion.SET_T,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SET_PART",33, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SET_PART ::= idobj pun cli_bot parA OPER parC pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Set_Part(Set_Part.Accion.SET_CLI,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SET_PART",33, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // GET_PART ::= idobj pun getA parA parC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		RESULT=new Get_Part(Get_Part.Accion.GET_ALI,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GET_PART",32, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // GET_PART ::= idobj pun getC parA parC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		RESULT=new Get_Part(Get_Part.Accion.GET_C,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GET_PART",32, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // GET_PART ::= idobj pun getP parA parC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		RESULT=new Get_Part(Get_Part.Accion.GET_P,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GET_PART",32, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // GET_PART ::= idobj pun getAl parA parC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		RESULT=new Get_Part(Get_Part.Accion.GET_AL,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GET_PART",32, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // GET_PART ::= idobj pun getAn parA parC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		RESULT=new Get_Part(Get_Part.Accion.GET_AN,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GET_PART",32, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // GET_PART ::= idobj pun getBo parA parC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		RESULT=new Get_Part(Get_Part.Accion.GET_B,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GET_PART",32, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // GET_PART ::= idobj pun getT parA parC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		RESULT=new Get_Part(Get_Part.Accion.GET_T,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GET_PART",32, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ARRAYS ::= ARRAYS coma corA ARRAY corC 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=a;RESULT.add(new Cols(b));
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARRAYS",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ARRAYS ::= corA ARRAY corC 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new LinkedList<>();RESULT.add(new Cols(a));
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARRAYS",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ARRAY ::= ARRAY coma OPER 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARRAY",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ARRAY ::= OPER 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>();RESULT.add(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARRAY",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analisis_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analisis_Sintactico$do_action_part00000000(
                               CUP$Analisis_Sintactico$act_num,
                               CUP$Analisis_Sintactico$parser,
                               CUP$Analisis_Sintactico$stack,
                               CUP$Analisis_Sintactico$top);
    }
}

}
