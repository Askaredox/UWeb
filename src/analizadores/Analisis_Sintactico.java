
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import Arbol.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analisis_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analisis_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analisis_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analisis_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\006\000\002\012\005\000\002\040\005" +
    "\000\002\013\007\000\002\013\006\000\002\041\005\000" +
    "\002\004\004\000\002\004\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\021\005\000\002\015\007\000\002\015\006\000\002" +
    "\043\005\000\002\042\003\000\002\005\004\000\002\005" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\005" +
    "\000\002\020\005\000\002\022\006\000\002\045\004\000" +
    "\002\045\003\000\002\044\005\000\002\044\005\000\002" +
    "\044\005\000\002\023\013\000\002\023\013\000\002\024" +
    "\011\000\002\024\011\000\002\024\006\000\002\006\004" +
    "\000\002\006\003\000\002\025\005\000\002\007\004\000" +
    "\002\007\003\000\002\026\005\000\002\026\005\000\002" +
    "\010\004\000\002\010\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\005\000" +
    "\002\011\004\000\002\011\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\034\006" +
    "\000\002\033\004\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\004\000\002\033\005\000\002\033\005\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\032\005\000\002\035\011\000\002\035\015" +
    "\000\002\036\011\000\002\037\010\000\002\050\013\000" +
    "\002\050\011\000\002\050\011\000\002\050\011\000\002" +
    "\050\015\000\002\050\011\000\002\050\011\000\002\050" +
    "\013\000\002\047\011\000\002\047\011\000\002\047\011" +
    "\000\002\047\011\000\002\047\011\000\002\047\011\000" +
    "\002\047\011\000\002\047\011\000\002\046\007\000\002" +
    "\046\007\000\002\046\007\000\002\046\007\000\002\046" +
    "\007\000\002\046\007\000\002\046\007\000\002\052\007" +
    "\000\002\052\005\000\002\051\005\000\002\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014e\000\004\004\004\001\002\000\006\006\010\012" +
    "\011\001\002\000\004\002\007\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002\000\004\010\u014d\001" +
    "\002\000\006\043\021\136\022\001\002\000\004\012\011" +
    "\001\002\000\004\006\010\001\002\000\004\005\015\001" +
    "\002\000\004\002\ufffe\001\002\000\004\005\017\001\002" +
    "\000\004\002\uffff\001\002\000\004\136\u0149\001\002\000" +
    "\004\113\u0147\001\002\000\030\003\041\014\040\016\047" +
    "\020\024\021\037\023\025\025\050\027\033\031\035\053" +
    "\031\144\026\001\002\000\034\003\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\020\ufff1\021\ufff1\023\ufff1\025\ufff1\027" +
    "\ufff1\031\ufff1\053\ufff1\144\ufff1\001\002\000\042\003\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\021\uffe7\023" +
    "\uffe7\025\uffe7\027\uffe7\031\uffe7\036\uffe7\040\uffe7\053\uffe7" +
    "\114\uffe7\144\uffe7\001\002\000\006\053\031\144\073\001" +
    "\002\000\034\003\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\020\uffed\021\uffed\023\uffed\025\uffed\027\uffed\031\uffed\053" +
    "\uffed\144\uffed\001\002\000\034\003\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\020\ufff7\021\ufff7\023\ufff7\025\ufff7\027" +
    "\ufff7\031\ufff7\053\ufff7\144\ufff7\001\002\000\034\003\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\016\ufff0\020\ufff0\021\ufff0\023" +
    "\ufff0\025\ufff0\027\ufff0\031\ufff0\053\ufff0\144\ufff0\001\002" +
    "\000\014\054\177\055\213\057\212\142\207\143\201\001" +
    "\002\000\034\003\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\020\uffee\021\uffee\023\uffee\025\uffee\027\uffee\031\uffee\053" +
    "\uffee\144\uffee\001\002\000\006\050\156\051\157\001\002" +
    "\000\034\003\uffef\013\uffef\014\uffef\015\uffef\016\uffef\020" +
    "\uffef\021\uffef\023\uffef\025\uffef\027\uffef\031\uffef\053\uffef" +
    "\144\uffef\001\002\000\006\052\113\136\114\001\002\000" +
    "\034\003\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\020\ufff6" +
    "\021\ufff6\023\ufff6\025\ufff6\027\ufff6\031\ufff6\053\ufff6\144" +
    "\ufff6\001\002\000\006\053\031\144\073\001\002\000\030" +
    "\003\041\014\040\016\047\020\024\021\037\023\025\025" +
    "\050\027\033\031\035\053\031\144\026\001\002\000\034" +
    "\003\uffec\013\uffec\014\uffec\015\uffec\016\uffec\020\uffec\021" +
    "\uffec\023\uffec\025\uffec\027\uffec\031\uffec\053\uffec\144\uffec" +
    "\001\002\000\034\003\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\020\ufff2\021\ufff2\023\ufff2\025\ufff2\027\ufff2\031\ufff2" +
    "\053\ufff2\144\ufff2\001\002\000\034\003\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3\023\ufff3\025\ufff3" +
    "\027\ufff3\031\ufff3\053\ufff3\144\ufff3\001\002\000\032\003" +
    "\041\013\106\014\040\016\047\020\024\021\037\023\025" +
    "\025\050\027\033\031\035\053\031\144\026\001\002\000" +
    "\034\003\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\020\ufff4" +
    "\021\ufff4\023\ufff4\025\ufff4\027\ufff4\031\ufff4\053\ufff4\144" +
    "\ufff4\001\002\000\034\003\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\020\ufff5\021\ufff5\023\ufff5\025\ufff5\027\ufff5\031" +
    "\ufff5\053\ufff5\144\ufff5\001\002\000\006\044\067\136\070" +
    "\001\002\000\010\045\054\046\052\047\051\001\002\000" +
    "\004\113\065\001\002\000\004\113\063\001\002\000\012" +
    "\045\054\046\052\047\051\136\060\001\002\000\004\113" +
    "\056\001\002\000\012\045\uffde\046\uffde\047\uffde\136\uffde" +
    "\001\002\000\004\141\057\001\002\000\012\045\uffdb\046" +
    "\uffdb\047\uffdb\136\uffdb\001\002\000\004\026\062\001\002" +
    "\000\012\045\uffdf\046\uffdf\047\uffdf\136\uffdf\001\002\000" +
    "\042\003\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0" +
    "\021\uffe0\023\uffe0\025\uffe0\027\uffe0\031\uffe0\036\uffe0\040" +
    "\uffe0\053\uffe0\114\uffe0\144\uffe0\001\002\000\004\137\064" +
    "\001\002\000\012\045\uffdd\046\uffdd\047\uffdd\136\uffdd\001" +
    "\002\000\004\137\066\001\002\000\012\045\uffdc\046\uffdc" +
    "\047\uffdc\136\uffdc\001\002\000\004\113\103\001\002\000" +
    "\006\053\031\144\073\001\002\000\004\136\072\001\002" +
    "\000\006\053\031\144\073\001\002\000\014\017\uffe4\022" +
    "\uffe4\024\uffe4\053\uffe4\144\uffe4\001\002\000\014\017\uffe3" +
    "\022\uffe3\024\uffe3\053\uffe3\144\uffe3\001\002\000\010\017" +
    "\077\053\031\144\073\001\002\000\014\017\uffe5\022\uffe5" +
    "\024\uffe5\053\uffe5\144\uffe5\001\002\000\042\003\uffea\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\020\uffea\021\uffea\023\uffea" +
    "\025\uffea\027\uffea\031\uffea\036\uffea\040\uffea\053\uffea\114" +
    "\uffea\144\uffea\001\002\000\014\017\uffe6\022\uffe6\024\uffe6" +
    "\053\uffe6\144\uffe6\001\002\000\010\017\102\053\031\144" +
    "\073\001\002\000\042\003\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\020\uffe9\021\uffe9\023\uffe9\025\uffe9\027\uffe9\031" +
    "\uffe9\036\uffe9\040\uffe9\053\uffe9\114\uffe9\144\uffe9\001\002" +
    "\000\004\141\104\001\002\000\004\136\uffe8\001\002\000" +
    "\034\003\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\020\ufff8" +
    "\021\ufff8\023\ufff8\025\ufff8\027\ufff8\031\ufff8\053\ufff8\144" +
    "\ufff8\001\002\000\006\005\ufffa\006\ufffa\001\002\000\032" +
    "\003\041\014\040\015\110\016\047\020\024\021\037\023" +
    "\025\025\050\027\033\031\035\053\031\144\026\001\002" +
    "\000\042\003\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\020" +
    "\uffeb\021\uffeb\023\uffeb\025\uffeb\027\uffeb\031\uffeb\036\uffeb" +
    "\040\uffeb\053\uffeb\114\uffeb\144\uffeb\001\002\000\010\022" +
    "\112\053\031\144\073\001\002\000\034\003\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2\023\uffe2\025" +
    "\uffe2\027\uffe2\031\uffe2\053\uffe2\144\uffe2\001\002\000\004" +
    "\113\145\001\002\000\004\033\115\001\002\000\006\035" +
    "\123\037\124\001\002\000\006\032\uffd4\033\uffd4\001\002" +
    "\000\006\032\121\033\115\001\002\000\006\032\uffd5\033" +
    "\uffd5\001\002\000\034\003\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\020\uffd6\021\uffd6\023\uffd6\025\uffd6\027\uffd6\031" +
    "\uffd6\053\uffd6\144\uffd6\001\002\000\010\034\uffd1\035\uffd1" +
    "\037\uffd1\001\002\000\020\014\040\016\047\020\024\025" +
    "\050\027\033\053\031\144\132\001\002\000\020\014\040" +
    "\016\047\020\024\025\050\027\033\053\031\144\132\001" +
    "\002\000\010\034\127\035\123\037\124\001\002\000\010" +
    "\034\uffd2\035\uffd2\037\uffd2\001\002\000\006\032\uffd3\033" +
    "\uffd3\001\002\000\022\014\040\016\047\020\024\025\050" +
    "\027\033\040\142\053\031\144\132\001\002\000\026\014" +
    "\uffcd\016\uffcd\020\uffcd\025\uffcd\027\uffcd\036\uffcd\040\uffcd" +
    "\053\uffcd\114\uffcd\144\uffcd\001\002\000\026\014\uffc7\016" +
    "\uffc7\020\uffc7\025\uffc7\027\uffc7\036\uffc7\040\uffc7\053\uffc7" +
    "\114\uffc7\144\uffc7\001\002\000\026\014\uffcb\016\uffcb\020" +
    "\uffcb\025\uffcb\027\uffcb\036\uffcb\040\uffcb\053\uffcb\114\uffcb" +
    "\144\uffcb\001\002\000\026\014\uffc6\016\uffc6\020\uffc6\025" +
    "\uffc6\027\uffc6\036\uffc6\040\uffc6\053\uffc6\114\uffc6\144\uffc6" +
    "\001\002\000\026\014\uffcc\016\uffcc\020\uffcc\025\uffcc\027" +
    "\uffcc\036\uffcc\040\uffcc\053\uffcc\114\uffcc\144\uffcc\001\002" +
    "\000\026\014\uffc8\016\uffc8\020\uffc8\025\uffc8\027\uffc8\036" +
    "\uffc8\040\uffc8\053\uffc8\114\uffc8\144\uffc8\001\002\000\026" +
    "\014\uffc9\016\uffc9\020\uffc9\025\uffc9\027\uffc9\036\uffc9\040" +
    "\uffc9\053\uffc9\114\uffc9\144\uffc9\001\002\000\026\014\uffca" +
    "\016\uffca\020\uffca\025\uffca\027\uffca\036\uffca\040\uffca\053" +
    "\uffca\114\uffca\144\uffca\001\002\000\026\014\uffce\016\uffce" +
    "\020\uffce\025\uffce\027\uffce\036\uffce\040\uffce\053\uffce\114" +
    "\uffce\144\uffce\001\002\000\010\034\uffd0\035\uffd0\037\uffd0" +
    "\001\002\000\022\014\040\016\047\020\024\025\050\027" +
    "\033\036\144\053\031\144\132\001\002\000\010\034\uffcf" +
    "\035\uffcf\037\uffcf\001\002\000\006\041\147\042\146\001" +
    "\002\000\004\136\153\001\002\000\004\136\150\001\002" +
    "\000\004\033\115\001\002\000\006\032\152\033\115\001" +
    "\002\000\034\003\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\020\uffd8\021\uffd8\023\uffd8\025\uffd8\027\uffd8\031\uffd8\053" +
    "\uffd8\144\uffd8\001\002\000\004\033\115\001\002\000\006" +
    "\032\155\033\115\001\002\000\034\003\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\020\uffd7\021\uffd7\023\uffd7\025\uffd7" +
    "\027\uffd7\031\uffd7\053\uffd7\144\uffd7\001\002\000\004\113" +
    "\167\001\002\000\004\113\160\001\002\000\004\141\161" +
    "\001\002\000\004\050\162\001\002\000\004\113\163\001" +
    "\002\000\004\141\164\001\002\000\004\136\165\001\002" +
    "\000\004\030\166\001\002\000\042\003\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\020\uffd9\021\uffd9\023\uffd9\025\uffd9" +
    "\027\uffd9\031\uffd9\036\uffd9\040\uffd9\053\uffd9\114\uffd9\144" +
    "\uffd9\001\002\000\004\141\170\001\002\000\004\051\171" +
    "\001\002\000\004\113\172\001\002\000\004\141\173\001" +
    "\002\000\004\136\174\001\002\000\004\030\175\001\002" +
    "\000\042\003\uffda\013\uffda\014\uffda\015\uffda\016\uffda\020" +
    "\uffda\021\uffda\023\uffda\025\uffda\027\uffda\031\uffda\036\uffda" +
    "\040\uffda\053\uffda\114\uffda\144\uffda\001\002\000\020\054" +
    "\uffc1\055\uffc1\057\uffc1\106\uffc1\122\uffc1\142\uffc1\143\uffc1" +
    "\001\002\000\026\041\224\042\230\110\227\117\222\135" +
    "\217\137\225\140\220\141\223\142\226\143\215\001\002" +
    "\000\020\054\uffbd\055\uffbd\057\uffbd\106\uffbd\122\uffbd\142" +
    "\uffbd\143\uffbd\001\002\000\006\113\341\115\340\001\002" +
    "\000\020\054\uffbe\055\uffbe\057\uffbe\106\uffbe\122\uffbe\142" +
    "\uffbe\143\uffbe\001\002\000\020\054\uffbc\055\uffbc\057\uffbc" +
    "\106\uffbc\122\uffbc\142\uffbc\143\uffbc\001\002\000\020\054" +
    "\uffc0\055\uffc0\057\uffc0\106\uffc0\122\uffc0\142\uffc0\143\uffc0" +
    "\001\002\000\020\054\uffc3\055\uffc3\057\uffc3\106\uffc3\122" +
    "\uffc3\142\uffc3\143\uffc3\001\002\000\020\054\uffc2\055\uffc2" +
    "\057\uffc2\106\uffc2\122\uffc2\142\uffc2\143\uffc2\001\002\000" +
    "\004\113\335\001\002\000\020\054\uffbf\055\uffbf\057\uffbf" +
    "\106\uffbf\122\uffbf\142\uffbf\143\uffbf\001\002\000\016\054" +
    "\177\055\213\057\212\106\334\142\207\143\201\001\002" +
    "\000\004\117\326\001\002\000\004\117\214\001\002\000" +
    "\026\041\224\042\230\110\227\117\222\135\217\137\225" +
    "\140\220\141\223\142\226\143\215\001\002\000\004\115" +
    "\300\001\002\000\036\107\246\110\242\111\243\112\232" +
    "\115\245\120\267\125\234\126\235\127\236\130\237\131" +
    "\244\132\233\133\241\134\240\001\002\000\026\041\224" +
    "\042\230\110\227\117\222\135\217\137\225\140\220\141" +
    "\223\142\226\143\215\001\002\000\044\107\uffa9\110\uffa9" +
    "\111\uffa9\112\uffa9\114\uffa9\115\uffa9\116\uffa9\120\uffa9\124" +
    "\uffa9\125\uffa9\126\uffa9\127\uffa9\130\uffa9\131\uffa9\132\uffa9" +
    "\133\uffa9\134\uffa9\001\002\000\044\107\uffa4\110\uffa4\111" +
    "\uffa4\112\uffa4\114\uffa4\115\uffa4\116\uffa4\120\uffa4\124\uffa4" +
    "\125\uffa4\126\uffa4\127\uffa4\130\uffa4\131\uffa4\132\uffa4\133" +
    "\uffa4\134\uffa4\001\002\000\026\041\224\042\230\110\227" +
    "\117\222\135\217\137\225\140\220\141\223\142\226\143" +
    "\215\001\002\000\044\107\uffa8\110\uffa8\111\uffa8\112\uffa8" +
    "\114\uffa8\115\uffa8\116\uffa8\120\uffa8\124\uffa8\125\uffa8\126" +
    "\uffa8\127\uffa8\130\uffa8\131\uffa8\132\uffa8\133\uffa8\134\uffa8" +
    "\001\002\000\044\107\uffa6\110\uffa6\111\uffa6\112\uffa6\114" +
    "\uffa6\115\uffa6\116\uffa6\120\uffa6\124\uffa6\125\uffa6\126\uffa6" +
    "\127\uffa6\130\uffa6\131\uffa6\132\uffa6\133\uffa6\134\uffa6\001" +
    "\002\000\044\107\uffaa\110\uffaa\111\uffaa\112\uffaa\114\uffaa" +
    "\115\uffaa\116\uffaa\120\uffaa\124\uffaa\125\uffaa\126\uffaa\127" +
    "\uffaa\130\uffaa\131\uffaa\132\uffaa\133\uffaa\134\uffaa\001\002" +
    "\000\044\107\uffa7\110\uffa7\111\uffa7\112\uffa7\114\uffa7\115" +
    "\uffa7\116\uffa7\120\uffa7\124\uffa7\125\uffa7\126\uffa7\127\uffa7" +
    "\130\uffa7\131\uffa7\132\uffa7\133\uffa7\134\uffa7\001\002\000" +
    "\026\041\224\042\230\110\227\117\222\135\217\137\225" +
    "\140\220\141\223\142\226\143\215\001\002\000\044\107" +
    "\uffa5\110\uffa5\111\uffa5\112\uffa5\114\uffa5\115\uffa5\116\uffa5" +
    "\120\uffa5\124\uffa5\125\uffa5\126\uffa5\127\uffa5\130\uffa5\131" +
    "\uffa5\132\uffa5\133\uffa5\134\uffa5\001\002\000\044\107\uffba" +
    "\110\uffba\111\uffba\112\uffba\114\uffba\115\uffba\116\uffba\120" +
    "\uffba\124\uffba\125\uffba\126\uffba\127\uffba\130\uffba\131\uffba" +
    "\132\uffba\133\uffba\134\uffba\001\002\000\026\041\224\042" +
    "\230\110\227\117\222\135\217\137\225\140\220\141\223" +
    "\142\226\143\215\001\002\000\026\041\224\042\230\110" +
    "\227\117\222\135\217\137\225\140\220\141\223\142\226" +
    "\143\215\001\002\000\026\041\224\042\230\110\227\117" +
    "\222\135\217\137\225\140\220\141\223\142\226\143\215" +
    "\001\002\000\026\041\224\042\230\110\227\117\222\135" +
    "\217\137\225\140\220\141\223\142\226\143\215\001\002" +
    "\000\026\041\224\042\230\110\227\117\222\135\217\137" +
    "\225\140\220\141\223\142\226\143\215\001\002\000\026" +
    "\041\224\042\230\110\227\117\222\135\217\137\225\140" +
    "\220\141\223\142\226\143\215\001\002\000\026\041\224" +
    "\042\230\110\227\117\222\135\217\137\225\140\220\141" +
    "\223\142\226\143\215\001\002\000\026\041\224\042\230" +
    "\110\227\117\222\135\217\137\225\140\220\141\223\142" +
    "\226\143\215\001\002\000\026\041\224\042\230\110\227" +
    "\117\222\135\217\137\225\140\220\141\223\142\226\143" +
    "\215\001\002\000\026\041\224\042\230\110\227\117\222" +
    "\135\217\137\225\140\220\141\223\142\226\143\215\001" +
    "\002\000\026\041\224\042\230\110\227\117\222\135\217" +
    "\137\225\140\220\141\223\142\226\143\215\001\002\000" +
    "\026\041\224\042\230\110\227\117\222\135\217\137\225" +
    "\140\220\141\223\142\226\143\215\001\002\000\026\041" +
    "\224\042\230\110\227\117\222\135\217\137\225\140\220" +
    "\141\223\142\226\143\215\001\002\000\044\107\uffb9\110" +
    "\uffb9\111\243\112\232\114\uffb9\115\uffb9\116\uffb9\120\uffb9" +
    "\124\uffb9\125\uffb9\126\uffb9\127\uffb9\130\uffb9\131\uffb9\132" +
    "\uffb9\133\uffb9\134\uffb9\001\002\000\044\107\246\110\242" +
    "\111\243\112\232\114\uffac\115\uffac\116\uffac\120\uffac\124" +
    "\uffac\125\234\126\235\127\236\130\237\131\244\132\233" +
    "\133\241\134\240\001\002\000\044\107\246\110\242\111" +
    "\243\112\232\114\uffaf\115\uffaf\116\uffaf\120\uffaf\124\uffaf" +
    "\125\uffaf\126\uffaf\127\uffaf\130\uffaf\131\uffaf\132\uffaf\133" +
    "\uffaf\134\uffaf\001\002\000\044\107\uffb7\110\uffb7\111\uffb7" +
    "\112\uffb7\114\uffb7\115\uffb7\116\uffb7\120\uffb7\124\uffb7\125" +
    "\uffb7\126\uffb7\127\uffb7\130\uffb7\131\uffb7\132\uffb7\133\uffb7" +
    "\134\uffb7\001\002\000\044\107\uffb8\110\uffb8\111\243\112" +
    "\232\114\uffb8\115\uffb8\116\uffb8\120\uffb8\124\uffb8\125\uffb8" +
    "\126\uffb8\127\uffb8\130\uffb8\131\uffb8\132\uffb8\133\uffb8\134" +
    "\uffb8\001\002\000\044\107\246\110\242\111\243\112\232" +
    "\114\uffb1\115\uffb1\116\uffb1\120\uffb1\124\uffb1\125\234\126" +
    "\235\127\236\130\237\131\244\132\233\133\uffb1\134\uffb1" +
    "\001\002\000\044\107\246\110\242\111\243\112\232\114" +
    "\uffb0\115\uffb0\116\uffb0\120\uffb0\124\uffb0\125\234\126\235" +
    "\127\236\130\237\131\244\132\233\133\241\134\uffb0\001" +
    "\002\000\044\107\246\110\242\111\243\112\232\114\uffb4" +
    "\115\uffb4\116\uffb4\120\uffb4\124\uffb4\125\uffb4\126\uffb4\127" +
    "\uffb4\130\uffb4\131\uffb4\132\uffb4\133\uffb4\134\uffb4\001\002" +
    "\000\044\107\246\110\242\111\243\112\232\114\uffb5\115" +
    "\uffb5\116\uffb5\120\uffb5\124\uffb5\125\uffb5\126\uffb5\127\uffb5" +
    "\130\uffb5\131\uffb5\132\uffb5\133\uffb5\134\uffb5\001\002\000" +
    "\044\107\246\110\242\111\243\112\232\114\uffb2\115\uffb2" +
    "\116\uffb2\120\uffb2\124\uffb2\125\uffb2\126\uffb2\127\uffb2\130" +
    "\uffb2\131\uffb2\132\uffb2\133\uffb2\134\uffb2\001\002\000\044" +
    "\107\246\110\242\111\243\112\232\114\uffb3\115\uffb3\116" +
    "\uffb3\120\uffb3\124\uffb3\125\uffb3\126\uffb3\127\uffb3\130\uffb3" +
    "\131\uffb3\132\uffb3\133\uffb3\134\uffb3\001\002\000\044\107" +
    "\246\110\242\111\243\112\232\114\uffae\115\uffae\116\uffae" +
    "\120\uffae\124\uffae\125\uffae\126\uffae\127\uffae\130\uffae\131" +
    "\uffae\132\uffae\133\uffae\134\uffae\001\002\000\044\107\uffb6" +
    "\110\uffb6\111\uffb6\112\uffb6\114\uffb6\115\uffb6\116\uffb6\120" +
    "\uffb6\124\uffb6\125\uffb6\126\uffb6\127\uffb6\130\uffb6\131\uffb6" +
    "\132\uffb6\133\uffb6\134\uffb6\001\002\000\036\107\246\110" +
    "\242\111\243\112\232\115\245\120\265\125\234\126\235" +
    "\127\236\130\237\131\244\132\233\133\241\134\240\001" +
    "\002\000\044\107\uffab\110\uffab\111\uffab\112\uffab\114\uffab" +
    "\115\uffab\116\uffab\120\uffab\124\uffab\125\uffab\126\uffab\127" +
    "\uffab\130\uffab\131\uffab\132\uffab\133\uffab\134\uffab\001\002" +
    "\000\044\107\246\110\242\111\243\112\232\114\uffad\115" +
    "\uffad\116\uffad\120\uffad\124\uffad\125\234\126\235\127\236" +
    "\130\237\131\244\132\233\133\uffad\134\uffad\001\002\000" +
    "\004\121\270\001\002\000\014\054\177\055\213\057\212" +
    "\142\207\143\201\001\002\000\016\054\177\055\213\057" +
    "\212\122\273\142\207\143\201\001\002\000\020\054\uffc4" +
    "\055\uffc4\057\uffc4\106\uffc4\122\uffc4\142\uffc4\143\uffc4\001" +
    "\002\000\022\054\uffa2\055\uffa2\056\274\057\uffa2\106\uffa2" +
    "\122\uffa2\142\uffa2\143\uffa2\001\002\000\004\121\275\001" +
    "\002\000\014\054\177\055\213\057\212\142\207\143\201" +
    "\001\002\000\016\054\177\055\213\057\212\122\277\142" +
    "\207\143\201\001\002\000\020\054\uffa1\055\uffa1\057\uffa1" +
    "\106\uffa1\122\uffa1\142\uffa1\143\uffa1\001\002\000\020\063" +
    "\303\065\301\072\307\074\305\076\302\101\304\104\306" +
    "\001\002\000\004\117\324\001\002\000\004\117\322\001" +
    "\002\000\004\117\320\001\002\000\004\117\316\001\002" +
    "\000\004\117\314\001\002\000\004\117\312\001\002\000" +
    "\004\117\310\001\002\000\004\120\311\001\002\000\044" +
    "\107\uff8c\110\uff8c\111\uff8c\112\uff8c\114\uff8c\115\uff8c\116" +
    "\uff8c\120\uff8c\124\uff8c\125\uff8c\126\uff8c\127\uff8c\130\uff8c" +
    "\131\uff8c\132\uff8c\133\uff8c\134\uff8c\001\002\000\004\120" +
    "\313\001\002\000\044\107\uff88\110\uff88\111\uff88\112\uff88" +
    "\114\uff88\115\uff88\116\uff88\120\uff88\124\uff88\125\uff88\126" +
    "\uff88\127\uff88\130\uff88\131\uff88\132\uff88\133\uff88\134\uff88" +
    "\001\002\000\004\120\315\001\002\000\044\107\uff8b\110" +
    "\uff8b\111\uff8b\112\uff8b\114\uff8b\115\uff8b\116\uff8b\120\uff8b" +
    "\124\uff8b\125\uff8b\126\uff8b\127\uff8b\130\uff8b\131\uff8b\132" +
    "\uff8b\133\uff8b\134\uff8b\001\002\000\004\120\317\001\002" +
    "\000\044\107\uff89\110\uff89\111\uff89\112\uff89\114\uff89\115" +
    "\uff89\116\uff89\120\uff89\124\uff89\125\uff89\126\uff89\127\uff89" +
    "\130\uff89\131\uff89\132\uff89\133\uff89\134\uff89\001\002\000" +
    "\004\120\321\001\002\000\044\107\uff8e\110\uff8e\111\uff8e" +
    "\112\uff8e\114\uff8e\115\uff8e\116\uff8e\120\uff8e\124\uff8e\125" +
    "\uff8e\126\uff8e\127\uff8e\130\uff8e\131\uff8e\132\uff8e\133\uff8e" +
    "\134\uff8e\001\002\000\004\120\323\001\002\000\044\107" +
    "\uff8a\110\uff8a\111\uff8a\112\uff8a\114\uff8a\115\uff8a\116\uff8a" +
    "\120\uff8a\124\uff8a\125\uff8a\126\uff8a\127\uff8a\130\uff8a\131" +
    "\uff8a\132\uff8a\133\uff8a\134\uff8a\001\002\000\004\120\325" +
    "\001\002\000\044\107\uff8d\110\uff8d\111\uff8d\112\uff8d\114" +
    "\uff8d\115\uff8d\116\uff8d\120\uff8d\124\uff8d\125\uff8d\126\uff8d" +
    "\127\uff8d\130\uff8d\131\uff8d\132\uff8d\133\uff8d\134\uff8d\001" +
    "\002\000\026\041\224\042\230\110\227\117\222\135\217" +
    "\137\225\140\220\141\223\142\226\143\215\001\002\000" +
    "\036\107\246\110\242\111\243\112\232\115\245\120\330" +
    "\125\234\126\235\127\236\130\237\131\244\132\233\133" +
    "\241\134\240\001\002\000\004\121\331\001\002\000\014" +
    "\054\177\055\213\057\212\142\207\143\201\001\002\000" +
    "\016\054\177\055\213\057\212\122\333\142\207\143\201" +
    "\001\002\000\020\054\uffa0\055\uffa0\057\uffa0\106\uffa0\122" +
    "\uffa0\142\uffa0\143\uffa0\001\002\000\050\003\uffc5\013\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\027\uffc5\031\uffc5\036\uffc5" +
    "\040\uffc5\053\uffc5\114\uffc5\144\uffc5\001\002\000\026\041" +
    "\224\042\230\110\227\117\222\135\217\137\225\140\220" +
    "\141\223\142\226\143\215\001\002\000\036\107\246\110" +
    "\242\111\243\112\232\115\245\116\337\125\234\126\235" +
    "\127\236\130\237\131\244\132\233\133\241\134\240\001" +
    "\002\000\020\054\uffbb\055\uffbb\057\uffbb\106\uffbb\122\uffbb" +
    "\142\uffbb\143\uffbb\001\002\000\024\060\u0118\062\u011e\064" +
    "\u011d\071\u0119\073\u011b\075\u011a\100\u0117\103\u011f\105\u011c" +
    "\001\002\000\016\061\347\066\345\067\343\070\344\077" +
    "\346\102\342\001\002\000\004\117\u0111\001\002\000\004" +
    "\117\u010d\001\002\000\004\117\u0103\001\002\000\004\117" +
    "\377\001\002\000\004\117\360\001\002\000\004\117\350" +
    "\001\002\000\026\041\224\042\230\110\227\117\222\135" +
    "\217\137\225\140\220\141\223\142\226\143\215\001\002" +
    "\000\040\107\246\110\242\111\243\112\232\114\352\115" +
    "\245\120\353\125\234\126\235\127\236\130\237\131\244" +
    "\132\233\133\241\134\240\001\002\000\026\041\224\042" +
    "\230\110\227\117\222\135\217\137\225\140\220\141\223" +
    "\142\226\143\215\001\002\000\004\116\354\001\002\000" +
    "\020\054\uff9d\055\uff9d\057\uff9d\106\uff9d\122\uff9d\142\uff9d" +
    "\143\uff9d\001\002\000\036\107\246\110\242\111\243\112" +
    "\232\115\245\120\356\125\234\126\235\127\236\130\237" +
    "\131\244\132\233\133\241\134\240\001\002\000\004\116" +
    "\357\001\002\000\020\054\uff9e\055\uff9e\057\uff9e\106\uff9e" +
    "\122\uff9e\142\uff9e\143\uff9e\001\002\000\004\123\362\001" +
    "\002\000\006\114\371\120\372\001\002\000\044\014\040" +
    "\016\047\020\024\025\050\027\033\041\224\042\230\053" +
    "\031\110\227\117\222\135\217\137\225\140\220\141\223" +
    "\142\226\143\215\144\132\001\002\000\022\014\040\016" +
    "\047\020\024\025\050\027\033\053\031\114\367\144\132" +
    "\001\002\000\036\107\246\110\242\111\243\112\232\115" +
    "\245\124\uff84\125\234\126\235\127\236\130\237\131\244" +
    "\132\233\133\241\134\240\001\002\000\004\124\366\001" +
    "\002\000\006\114\uff86\120\uff86\001\002\000\026\041\224" +
    "\042\230\110\227\117\222\135\217\137\225\140\220\141" +
    "\223\142\226\143\215\001\002\000\036\107\246\110\242" +
    "\111\243\112\232\115\245\124\uff85\125\234\126\235\127" +
    "\236\130\237\131\244\132\233\133\241\134\240\001\002" +
    "\000\004\123\374\001\002\000\004\116\373\001\002\000" +
    "\020\054\uff98\055\uff98\057\uff98\106\uff98\122\uff98\142\uff98" +
    "\143\uff98\001\002\000\044\014\040\016\047\020\024\025" +
    "\050\027\033\041\224\042\230\053\031\110\227\117\222" +
    "\135\217\137\225\140\220\141\223\142\226\143\215\144" +
    "\132\001\002\000\004\124\376\001\002\000\006\114\uff87" +
    "\120\uff87\001\002\000\026\041\224\042\230\110\227\117" +
    "\222\135\217\137\225\140\220\141\223\142\226\143\215" +
    "\001\002\000\036\107\246\110\242\111\243\112\232\115" +
    "\245\120\u0101\125\234\126\235\127\236\130\237\131\244" +
    "\132\233\133\241\134\240\001\002\000\004\116\u0102\001" +
    "\002\000\020\054\uff9c\055\uff9c\057\uff9c\106\uff9c\122\uff9c" +
    "\142\uff9c\143\uff9c\001\002\000\026\041\224\042\230\110" +
    "\227\117\222\135\217\137\225\140\220\141\223\142\226" +
    "\143\215\001\002\000\040\107\246\110\242\111\243\112" +
    "\232\114\u0105\115\245\120\u0106\125\234\126\235\127\236" +
    "\130\237\131\244\132\233\133\241\134\240\001\002\000" +
    "\026\041\224\042\230\110\227\117\222\135\217\137\225" +
    "\140\220\141\223\142\226\143\215\001\002\000\004\116" +
    "\u0107\001\002\000\020\054\uff99\055\uff99\057\uff99\106\uff99" +
    "\122\uff99\142\uff99\143\uff99\001\002\000\036\107\246\110" +
    "\242\111\243\112\232\114\u0109\115\245\125\234\126\235" +
    "\127\236\130\237\131\244\132\233\133\241\134\240\001" +
    "\002\000\026\041\224\042\230\110\227\117\222\135\217" +
    "\137\225\140\220\141\223\142\226\143\215\001\002\000" +
    "\036\107\246\110\242\111\243\112\232\115\245\120\u010b" +
    "\125\234\126\235\127\236\130\237\131\244\132\233\133" +
    "\241\134\240\001\002\000\004\116\u010c\001\002\000\020" +
    "\054\uff9a\055\uff9a\057\uff9a\106\uff9a\122\uff9a\142\uff9a\143" +
    "\uff9a\001\002\000\026\041\224\042\230\110\227\117\222" +
    "\135\217\137\225\140\220\141\223\142\226\143\215\001" +
    "\002\000\036\107\246\110\242\111\243\112\232\115\245" +
    "\120\u010f\125\234\126\235\127\236\130\237\131\244\132" +
    "\233\133\241\134\240\001\002\000\004\116\u0110\001\002" +
    "\000\020\054\uff9b\055\uff9b\057\uff9b\106\uff9b\122\uff9b\142" +
    "\uff9b\143\uff9b\001\002\000\026\041\224\042\230\110\227" +
    "\117\222\135\217\137\225\140\220\141\223\142\226\143" +
    "\215\001\002\000\036\107\246\110\242\111\243\112\232" +
    "\114\u0113\115\245\125\234\126\235\127\236\130\237\131" +
    "\244\132\233\133\241\134\240\001\002\000\026\041\224" +
    "\042\230\110\227\117\222\135\217\137\225\140\220\141" +
    "\223\142\226\143\215\001\002\000\036\107\246\110\242" +
    "\111\243\112\232\115\245\120\u0115\125\234\126\235\127" +
    "\236\130\237\131\244\132\233\133\241\134\240\001\002" +
    "\000\004\116\u0116\001\002\000\020\054\uff97\055\uff97\057" +
    "\uff97\106\uff97\122\uff97\142\uff97\143\uff97\001\002\000\004" +
    "\117\u013f\001\002\000\004\117\u013c\001\002\000\004\117" +
    "\u0138\001\002\000\004\117\u0134\001\002\000\004\117\u0130" +
    "\001\002\000\004\117\u012c\001\002\000\004\117\u0128\001" +
    "\002\000\004\117\u0124\001\002\000\004\117\u0120\001\002" +
    "\000\026\041\224\042\230\110\227\117\222\135\217\137" +
    "\225\140\220\141\223\142\226\143\215\001\002\000\036" +
    "\107\246\110\242\111\243\112\232\115\245\120\u0122\125" +
    "\234\126\235\127\236\130\237\131\244\132\233\133\241" +
    "\134\240\001\002\000\004\116\u0123\001\002\000\020\054" +
    "\uff90\055\uff90\057\uff90\106\uff90\122\uff90\142\uff90\143\uff90" +
    "\001\002\000\026\041\224\042\230\110\227\117\222\135" +
    "\217\137\225\140\220\141\223\142\226\143\215\001\002" +
    "\000\036\107\246\110\242\111\243\112\232\115\245\120" +
    "\u0126\125\234\126\235\127\236\130\237\131\244\132\233" +
    "\133\241\134\240\001\002\000\004\116\u0127\001\002\000" +
    "\020\054\uff96\055\uff96\057\uff96\106\uff96\122\uff96\142\uff96" +
    "\143\uff96\001\002\000\026\041\224\042\230\110\227\117" +
    "\222\135\217\137\225\140\220\141\223\142\226\143\215" +
    "\001\002\000\036\107\246\110\242\111\243\112\232\115" +
    "\245\120\u012a\125\234\126\235\127\236\130\237\131\244" +
    "\132\233\133\241\134\240\001\002\000\004\116\u012b\001" +
    "\002\000\020\054\uff95\055\uff95\057\uff95\106\uff95\122\uff95" +
    "\142\uff95\143\uff95\001\002\000\026\041\224\042\230\110" +
    "\227\117\222\135\217\137\225\140\220\141\223\142\226" +
    "\143\215\001\002\000\036\107\246\110\242\111\243\112" +
    "\232\115\245\120\u012e\125\234\126\235\127\236\130\237" +
    "\131\244\132\233\133\241\134\240\001\002\000\004\116" +
    "\u012f\001\002\000\020\054\uff8f\055\uff8f\057\uff8f\106\uff8f" +
    "\122\uff8f\142\uff8f\143\uff8f\001\002\000\026\041\224\042" +
    "\230\110\227\117\222\135\217\137\225\140\220\141\223" +
    "\142\226\143\215\001\002\000\036\107\246\110\242\111" +
    "\243\112\232\115\245\120\u0132\125\234\126\235\127\236" +
    "\130\237\131\244\132\233\133\241\134\240\001\002\000" +
    "\004\116\u0133\001\002\000\020\054\uff93\055\uff93\057\uff93" +
    "\106\uff93\122\uff93\142\uff93\143\uff93\001\002\000\026\041" +
    "\224\042\230\110\227\117\222\135\217\137\225\140\220" +
    "\141\223\142\226\143\215\001\002\000\036\107\246\110" +
    "\242\111\243\112\232\115\245\120\u0136\125\234\126\235" +
    "\127\236\130\237\131\244\132\233\133\241\134\240\001" +
    "\002\000\004\116\u0137\001\002\000\020\054\uff92\055\uff92" +
    "\057\uff92\106\uff92\122\uff92\142\uff92\143\uff92\001\002\000" +
    "\026\041\224\042\230\110\227\117\222\135\217\137\225" +
    "\140\220\141\223\142\226\143\215\001\002\000\036\107" +
    "\246\110\242\111\243\112\232\115\245\120\u013a\125\234" +
    "\126\235\127\236\130\237\131\244\132\233\133\241\134" +
    "\240\001\002\000\004\116\u013b\001\002\000\020\054\uff94" +
    "\055\uff94\057\uff94\106\uff94\122\uff94\142\uff94\143\uff94\001" +
    "\002\000\004\120\u013d\001\002\000\004\116\u013e\001\002" +
    "\000\020\054\uff9f\055\uff9f\057\uff9f\106\uff9f\122\uff9f\142" +
    "\uff9f\143\uff9f\001\002\000\026\041\224\042\230\110\227" +
    "\117\222\135\217\137\225\140\220\141\223\142\226\143" +
    "\215\001\002\000\036\107\246\110\242\111\243\112\232" +
    "\115\245\120\u0141\125\234\126\235\127\236\130\237\131" +
    "\244\132\233\133\241\134\240\001\002\000\004\116\u0142" +
    "\001\002\000\020\054\uff91\055\uff91\057\uff91\106\uff91\122" +
    "\uff91\142\uff91\143\uff91\001\002\000\036\107\246\110\242" +
    "\111\243\112\232\115\245\116\u0144\125\234\126\235\127" +
    "\236\130\237\131\244\132\233\133\241\134\240\001\002" +
    "\000\020\054\uffa3\055\uffa3\057\uffa3\106\uffa3\122\uffa3\142" +
    "\uffa3\143\uffa3\001\002\000\010\024\u0146\053\031\144\073" +
    "\001\002\000\034\003\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\020\uffe1\021\uffe1\023\uffe1\025\uffe1\027\uffe1\031\uffe1" +
    "\053\uffe1\144\uffe1\001\002\000\004\141\u0148\001\002\000" +
    "\004\136\ufff9\001\002\000\030\003\041\014\040\016\047" +
    "\020\024\021\037\023\025\025\050\027\033\031\035\053" +
    "\031\144\026\001\002\000\032\003\041\013\u014b\014\040" +
    "\016\047\020\024\021\037\023\025\025\050\027\033\031" +
    "\035\053\031\144\026\001\002\000\006\005\ufffb\006\ufffb" +
    "\001\002\000\004\007\u0150\001\002\000\004\144\u014e\001" +
    "\002\000\004\011\u014f\001\002\000\004\007\ufffc\001\002" +
    "\000\006\005\ufffd\012\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014e\000\006\002\004\003\005\001\001\000\006\012" +
    "\011\013\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u014b\001\001\000\004\041" +
    "\017\001\001\000\004\013\015\001\001\000\004\012\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\043\014\026\015\035\017\042\020\041\021" +
    "\045\022\022\023\027\024\033\030\031\042\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\u0144\016" +
    "\075\030\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\011\210\031\204\032\175\034" +
    "\205\035\203\036\207\037\201\047\177\050\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\110\016\075" +
    "\030\073\001\001\000\030\004\106\014\026\015\035\017" +
    "\042\020\041\021\045\022\022\023\027\024\033\030\031" +
    "\042\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\014\104\015\035\017\042\020\041" +
    "\021\045\022\022\023\027\024\033\030\031\042\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\070" +
    "\001\001\000\006\044\054\045\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\100\016\075" +
    "\030\073\001\001\000\002\001\001\000\010\005\074\016" +
    "\075\030\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\077\030\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\077\030\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\014\104" +
    "\015\035\017\042\020\041\021\045\022\022\023\027\024" +
    "\033\030\031\042\044\001\001\000\002\001\001\000\006" +
    "\016\077\030\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\116\025\115\001\001\000\006\007\124" +
    "\026\121\001\001\000\002\001\001\000\004\025\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\010\142\015\137\021\132\022\136\023\135\027" +
    "\130\030\133\042\134\001\001\000\022\010\127\015\137" +
    "\021\132\022\136\023\135\027\130\030\133\042\134\001" +
    "\001\000\004\026\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\137\021\132\022\136\023\135\027" +
    "\140\030\133\042\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\137\021" +
    "\132\022\136\023\135\027\140\030\133\042\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\150\025\115\001\001\000\004" +
    "\025\117\001\001\000\002\001\001\000\006\006\153\025" +
    "\115\001\001\000\004\025\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\u0142\046\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\031\271\032" +
    "\175\034\205\035\203\036\207\037\201\047\177\050\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\215\046\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\265\046\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\263\046\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\230\046\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\262\046\220\001\001\000" +
    "\006\033\261\046\220\001\001\000\006\033\260\046\220" +
    "\001\001\000\006\033\257\046\220\001\001\000\006\033" +
    "\256\046\220\001\001\000\006\033\255\046\220\001\001" +
    "\000\006\033\254\046\220\001\001\000\006\033\253\046" +
    "\220\001\001\000\006\033\252\046\220\001\001\000\006" +
    "\033\251\046\220\001\001\000\006\033\250\046\220\001" +
    "\001\000\006\033\247\046\220\001\001\000\006\033\246" +
    "\046\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\011\270\031\204" +
    "\032\175\034\205\035\203\036\207\037\201\047\177\050" +
    "\202\001\001\000\022\031\271\032\175\034\205\035\203" +
    "\036\207\037\201\047\177\050\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\011\275" +
    "\031\204\032\175\034\205\035\203\036\207\037\201\047" +
    "\177\050\202\001\001\000\022\031\271\032\175\034\205" +
    "\035\203\036\207\037\201\047\177\050\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\326\046\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\011\331\031\204\032\175\034\205" +
    "\035\203\036\207\037\201\047\177\050\202\001\001\000" +
    "\022\031\271\032\175\034\205\035\203\036\207\037\201" +
    "\047\177\050\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\335\046\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\350\046\220\001\001\000\002\001\001\000\006\033\354" +
    "\046\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\360\001\001\000\002\001\001\000\030\010\362\015" +
    "\137\021\132\022\136\023\135\027\130\030\133\033\363" +
    "\042\134\046\220\051\364\001\001\000\020\015\137\021" +
    "\132\022\136\023\135\027\140\030\133\042\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\367\046\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\010" +
    "\362\015\137\021\132\022\136\023\135\027\130\030\133" +
    "\033\363\042\134\046\220\051\374\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\377\046\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\u0103\046\220\001\001\000\002\001\001\000\006" +
    "\033\u0107\046\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\u0109\046\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\u010d\046\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\u0111\046\220\001" +
    "\001\000\002\001\001\000\006\033\u0113\046\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\u0120" +
    "\046\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\u0124\046\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\u0128\046\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\u012c\046\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\u0130\046\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\u0134\046\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\u0138\046\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\u013f\046\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\077\030\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\u0149\014\026\015\035\017\042\020\041" +
    "\021\045\022\022\023\027\024\033\030\031\042\044\001" +
    "\001\000\026\014\104\015\035\017\042\020\041\021\045" +
    "\022\022\023\027\024\033\030\031\042\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analisis_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analisis_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analisis_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Arbol AST;
    public Arbol getAST(){
        return AST;
    }

    public void syntax_error(Symbol s)
    {
       try{
            String lexema = s.value.toString();
            int fila = s.right+1;
            int columna = s.left;
            int tipo = s.sym;

            System.out.println("Error sintáctico recuperado");
            System.out.println("Lexema:"+lexema);
            System.out.println("Fila:"+fila);
            System.out.println("Columna:"+columna);
            System.out.println("tipo:"+tipo);
            //action_obj.err.addE("SINTACTICO", lexema, fila, columna, "Se esperaba otra cosa");
       }catch(NullPointerException ex){}
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
       try{
            String lexema = s.value.toString();
            int fila = s.right+1;
            int columna = s.left;
            int tipo = s.sym;

            System.out.println("Error sintáctico NO recuperado");
            System.out.println("Lexema:"+lexema);
            System.out.println("Fila:"+fila);
            System.out.println("Columna:"+columna);
            System.out.println("tipo:"+tipo);
       }catch(NullPointerException ex){}
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analisis_Sintactico$actions {




  private final Analisis_Sintactico parser;

  /** Constructor */
  CUP$Analisis_Sintactico$actions(Analisis_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action_part00000000(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analisis_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analisis_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analisis_Sintactico$parser.done_parsing();
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= COMPI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		parser.AST=new Arbol(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // COMPI ::= com_a CABECERA CUERPO com_c 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new LinkedList<>();RESULT.add(a);RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COMPI",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // COMPI ::= com_a CUERPO CABECERA com_c 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new LinkedList<>();RESULT.add(a);RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COMPI",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CABECERA ::= cab_a TITULO cab_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Titulo(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CABECERA",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TITULO ::= tit_a texto tit_c 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new String(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TITULO",30, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= cue_a FONDO cie ALLS cue_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Cuerpo(a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= cue_a cie ALLS cue_c 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Cuerpo(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FONDO ::= fond igu cad 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FONDO",31, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ALLS ::= ALLS ALL 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALLS",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ALLS ::= ALL 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>();RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALLS",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ALL ::= PARRAFO 
            {
              Instruccion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion p = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=p;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ALL ::= ESPACIO 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=e;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ALL ::= SALTO 
            {
              Instruccion RESULT =null;
		RESULT=new Salto();
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ALL ::= TEXTOA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ALL ::= TEXTOB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ALL ::= IMAGEN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ALL ::= BOTTON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ALL ::= TABLA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ALL ::= SCRIPT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ALL ::= texto 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Texto(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ALL ::= error 
            {
              Instruccion RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALL",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ESPACIO ::= esp_a ALLS esp_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Espacio(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ESPACIO",15, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARRAFO ::= par_a ALIGN cie TESHS par_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Parrafo(a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("PARRAFO",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARRAFO ::= par_a cie TESHS par_c 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Parrafo(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("PARRAFO",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ALIGN ::= alin igu cad 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ALIGN",33, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SALTO ::= salt 
            {
              String RESULT =null;
		/*YA ESTA HECHO*/
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SALTO",32, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TESHS ::= TESHS TESH 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TESHS",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TESHS ::= TESH 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>();RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TESHS",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TESH ::= texto 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Texto(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TESH",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TESH ::= SCRIPT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TESH",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TEXTOA ::= tea_a TESHS tea_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new TextoA(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTOA",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TEXTOB ::= teb_a TESHS teb_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new TextoB(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTOB",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IMAGEN ::= ima_a IMGS cie ima_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Imagen(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IMGS ::= IMGS IMG 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMGS",35, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IMGS ::= IMG 
            {
              LinkedList<String> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>();RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMGS",35, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IMG ::= alto igu num 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT="3"+a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMG",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IMG ::= anch igu num 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT="2"+a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMG",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IMG ::= path igu cad 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT="1"+a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMG",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BOTTON ::= bot_a ide igu cad text igu cad cie bot_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Boton(a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("BOTTON",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BOTTON ::= bot_a text igu cad ide igu cad cie bot_c 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		RESULT=new Boton(a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("BOTTON",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TABLA ::= tab_a bord igu tru cie FILAS tab_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Tabla(true,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TABLA ::= tab_a bord igu fals cie FILAS tab_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Tabla(false,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TABLA ::= tab_a cie FILAS tab_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Tabla(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TABLA",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FILAS ::= FILAS FILA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FILAS",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FILAS ::= FILA 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>();RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FILAS",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FILA ::= fil_a COLUMNS fil_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Fila(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FILA",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COLUMNS ::= COLUMNS COLUMN 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COLUMNS",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COLUMNS ::= COLUMN 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>();RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COLUMNS",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COLUMN ::= col_a DATAS col_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Columna(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COLUMN",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COLUMN ::= colc_a DATAS colc_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Columna(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COLUMN",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DATAS ::= DATAS DATA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATAS",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DATAS ::= DATA 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>();RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATAS",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DATA ::= SALTO 
            {
              Instruccion RESULT =null;
		RESULT=new Salto();
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATA",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DATA ::= ESPACIO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATA",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DATA ::= PARRAFO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATA",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DATA ::= IMAGEN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATA",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DATA ::= BOTTON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATA",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DATA ::= texto 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Texto(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATA",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DATA ::= SCRIPT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATA",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SCRIPT ::= hs_a SENTS hs_c 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Script(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SCRIPT",22, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTS ::= SENTS SENT 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTS",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTS ::= SENT 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>();RESULT.add(b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTS",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENT ::= DECL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENT ::= ECHO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENT ::= IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENT ::= REPETIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENT ::= INSERTAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENT ::= SET_PART 
            {
              Instruccion RESULT =null;
		
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENT ::= CRE_PART 
            {
              Instruccion RESULT =null;
		
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECL ::= idvar igu OPER pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Declaracion(a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECL",26, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPER ::= men OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.NEG,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPER ::= OPER mas OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.SUMA,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPER ::= OPER men OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.RESTA,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPER ::= OPER por OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.MULT,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPER ::= OPER div OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.DIV,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPER ::= OPER les OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.MEN,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPER ::= OPER gre OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.MAY,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPER ::= OPER lesigu OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.MENIGU,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPER ::= OPER greigu OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.MAYIGU,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPER ::= OPER and OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.AND,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPER ::= OPER or OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.OR,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPER ::= OPER diff OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.DIFF,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPER ::= OPER igua OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.IGU,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPER ::= not OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.NOT,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPER ::= OPER pun OPER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.CONCAT,a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPER ::= parA OPER parC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=a;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPER ::= num 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Integer.valueOf(a));
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPER ::= dec 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Double.valueOf(a));
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPER ::= cad 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.CAD,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPER ::= idvar 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.ID,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPER ::= tru 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.TRUE,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPER ::= fals 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Oper.FALSE,a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPER ::= GET_PART 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPER",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ECHO ::= echo OPER pyc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Echo(a);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ECHO",24, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // IF ::= ife parA OPER parC llavA SENTS llavC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new If_Sent(a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IF",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IF ::= ife parA OPER parC llavA SENTS llavC elsee llavA SENTS llavC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new If_Sent(a,b,c);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IF",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // REPETIR ::= repet parA OPER parC llavA SENTS llavC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT=new Repetir(a,b);
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INSERTAR ::= idobj pun inser parA parC pyc 
            {
              Instruccion RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INSERTAR",29, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CRE_PART ::= idobj igu cre_par parA OPER coma OPER parC pyc 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CRE_PART",38, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CRE_PART ::= idobj igu cre_par parA OPER parC pyc 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CRE_PART",38, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CRE_PART ::= idobj igu cre_tea parA OPER parC pyc 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CRE_PART",38, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CRE_PART ::= idobj igu cre_teb parA OPER parC pyc 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CRE_PART",38, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CRE_PART ::= idobj igu cre_img parA OPER coma OPER coma OPER parC pyc 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CRE_PART",38, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CRE_PART ::= idobj igu cre_img parA OPER parC pyc 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CRE_PART",38, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CRE_PART ::= idobj igu cre_tab parA ARRAYS parC pyc 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CRE_PART",38, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CRE_PART ::= idobj igu cre_bot parA OPER coma OPER parC pyc 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("CRE_PART",38, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SET_PART ::= idobj pun setA parA OPER parC pyc 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SET_PART",37, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SET_PART ::= idobj pun setC parA OPER parC pyc 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SET_PART",37, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SET_PART ::= idobj pun setP parA OPER parC pyc 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SET_PART",37, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SET_PART ::= idobj pun setAl parA OPER parC pyc 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SET_PART",37, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SET_PART ::= idobj pun setAn parA OPER parC pyc 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SET_PART",37, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SET_PART ::= idobj pun setBo parA OPER parC pyc 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SET_PART",37, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SET_PART ::= idobj pun setT parA OPER parC pyc 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SET_PART",37, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SET_PART ::= idobj pun cli_bot parA OPER parC pyc 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SET_PART",37, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // GET_PART ::= idobj pun getA parA parC 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GET_PART",36, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // GET_PART ::= idobj pun getC parA parC 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GET_PART",36, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // GET_PART ::= idobj pun getP parA parC 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GET_PART",36, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // GET_PART ::= idobj pun getAl parA parC 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GET_PART",36, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // GET_PART ::= idobj pun getAn parA parC 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GET_PART",36, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // GET_PART ::= idobj pun getBo parA parC 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GET_PART",36, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // GET_PART ::= idobj pun getT parA parC 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GET_PART",36, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ARRAYS ::= ARRAYS coma corA ARRAY corC 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARRAYS",40, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ARRAYS ::= corA ARRAY corC 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARRAYS",40, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ARRAY ::= DATAS coma OPER 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARRAY",39, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ARRAY ::= OPER 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARRAY",39, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analisis_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analisis_Sintactico$do_action_part00000000(
                               CUP$Analisis_Sintactico$act_num,
                               CUP$Analisis_Sintactico$parser,
                               CUP$Analisis_Sintactico$stack,
                               CUP$Analisis_Sintactico$top);
    }
}

}
