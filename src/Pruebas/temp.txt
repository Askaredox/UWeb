INICIO::= SENTS:temp                                    {:
                                                            raiz.add((Nodo)temp);
                                                        :};
SENTS::= SENTS:ss SENT:s                                {:
                                                            Nodo temp = new Nodo("SENTS","SENTS");
                                                            temp.setHijos((Nodo)ss);
                                                            temp.add((Nodo)s);
                                                            RESULT=temp;
                                                        :}
       | SENT:s                                         {:
                                                            Nodo temp = new Nodo("SENTS","SENTS");
                                                            temp.add((Nodo)s);
                                                            RESULT=temp;
                                                        :};
SENT::= DEF_GL:se                                       {:
                                                            Nodo temp = new Nodo("DEFINIR_GL","DEFINIR_GL");
                                                            temp.add((Nodo)se);
                                                            RESULT=temp;
                                                        :}
      | GR_B:se                                         {:
                                                            Nodo temp = new Nodo("GR_BARRAS","GR_BARRAS");
                                                            temp.add((Nodo)se);
                                                            RESULT=temp;
                                                        :}
      | GR_L:se                                         {:
                                                            Nodo temp = new Nodo("GR_LINEAS","GR_LINEAS");
                                                            temp.add((Nodo)se);
                                                            RESULT=temp;
                                                        :}
      | GALERIAS:se                                     {:
                                                            Nodo temp = new Nodo("GALERIAS","GALERIAS");
                                                            temp.add((Nodo)se);
                                                            RESULT=temp;
                                                        :};
GALERIAS::=gal llavA GALS:gs llavC                      {:
                                                            RESULT=gs;
                                                        :};
GALS::= GALS:gs GAL:g pyc                               {:
                                                            Nodo temp = new Nodo("GALERIA","GALERIA");
                                                            temp.setHijos((Nodo)gs);
                                                            temp.add((Nodo)g);
                                                            RESULT=temp;
                                                        :}
      | GAL:g pyc                                       {:
                                                            Nodo temp = new Nodo("GALERIA","GALERIA");
                                                            temp.add((Nodo)g);
                                                            RESULT=temp;
                                                        :}
        |error pyc;
GAL::=gal parA VALUE:val coma NOMGAL:n parC             {:
                                                            Nodo temp = (Nodo)val;
                                                            temp.add((Nodo)n);
                                                            RESULT=temp;
                                                        :};
NOMGAL::= NOMGAL:n coma VALUE:val                       {:
                                                            Nodo temp = new Nodo("NOM_GALERIA","NOM_GALERIA");
                                                            temp.setHijos((Nodo)n);
                                                            temp.add((Nodo)val);
                                                            RESULT=temp;
                                                        :}
        | VALUE:val                                     {:
                                                            Nodo temp = new Nodo("NOM_GALERIA","NOM_GALERIA");
                                                            temp.add((Nodo)val);
                                                            RESULT=temp;
                                                        :};
GR_L::= gr_l llavA CHAR_LS:ch llavC                     {:
                                                            RESULT=ch;
                                                        :};

CHAR_LS::= CHAR_LS:cs CHAR_L:c                          {:
                                                            Nodo temp = new Nodo("CHAR_LINEAS","CHAR_LINEAS");
                                                            temp.setHijos((Nodo)cs);
                                                            temp.add((Nodo)c);
                                                            RESULT=temp;
                                                        :}
         | CHAR_L:c                                     {:
                                                            Nodo temp = new Nodo("CHAR_LINEAS","CHAR_LINEAS");
                                                            temp.add((Nodo)c);
                                                            RESULT=temp;
                                                        :};
CHAR_L::=ID:ch pyc                                      {:
                                                            RESULT=ch;
                                                        :}
        | TITULO:ch pyc                                 {:
                                                            RESULT=ch;
                                                        :}
        | TITUX:ch pyc                                  {:
                                                            RESULT=ch;
                                                        :}
        | TITUY:ch pyc                                  {:
                                                            RESULT=ch;
                                                        :}
        | defxy queA LISTS:ls queC                      {:
                                                            Nodo temp = new Nodo("DEF_XY","DEF_XY");
                                                            temp.add((Nodo)ls);
                                                            RESULT=temp;
                                                        :}
        | error pyc;

LISTS::=LISTS:ls LIST:l pyc                             {:
                                                            Nodo temp = new Nodo("DATA","DATA");
                                                            temp.setHijos((Nodo)ls);
                                                            temp.add((Nodo)l);
                                                            RESULT=temp;
                                                        :}
       | LIST:l pyc                                     {:
                                                            Nodo temp = new Nodo("DATA","DATA");
                                                            temp.add((Nodo)l);
                                                            RESULT=temp;
                                                        :};
LIST::= NOMBRE:ch                                       {:
                                                            RESULT=ch;
                                                        :}
      | COLOR:ch                                        {:
                                                            RESULT=ch;
                                                        :}
      | GROSOR:ch                                       {:
                                                            RESULT=ch;
                                                        :}
      | PUNTOS:ch                                       {:
                                                            RESULT=ch;
                                                        :};

NOMBRE::=nomb dp VALUE:val                               {:
                                                            Nodo temp = new Nodo("NOMBRE","NOMBRE");
                                                            temp.add((Nodo)val);
                                                            RESULT=temp;
                                                        :};
COLOR::=col dp VALUE:val                                {:
                                                            Nodo temp = new Nodo("COLOR","COLOR");
                                                            temp.add((Nodo)val);
                                                            RESULT=temp;
                                                        :};
GROSOR::=gros dp VALUE:val                              {:
                                                            Nodo temp = new Nodo("GROSOR","GROSOR");
                                                            temp.add((Nodo)val);
                                                            RESULT=temp;
                                                        :};
PUNTOS::=punt dp corA ARRAYS:arr corC                   {:
                                                            Nodo temp = new Nodo("PUNTOS","PUNTOS");
                                                            temp.add((Nodo)arr);
                                                            RESULT=temp;
                                                        :};
GR_B::=gr_b llavA CHAR_BS:ch llavC                      {:
                                                            RESULT=ch;
                                                        :};
CHAR_BS::= CHAR_BS:cs CHAR_B:c pyc                      {:
                                                            Nodo temp = new Nodo("CHAR_BARRAS","CHAR_BARRAS");
                                                            temp.setHijos((Nodo)cs);
                                                            temp.add((Nodo)c);
                                                            RESULT=temp;
                                                        :}

         | CHAR_B:c pyc                                 {:
                                                            Nodo temp = new Nodo("CHAR_BARRAS","CHAR_BARRAS");
                                                            temp.add((Nodo)c);
                                                            RESULT=temp;
                                                        :}
         | error pyc;
CHAR_B::= ID:ch                                         {:
                                                            RESULT=ch;
                                                        :}
        | TITULO:ch                                     {:
                                                            RESULT=ch;
                                                        :}
        | EJEX:ch                                       {:
                                                            RESULT=ch;
                                                        :}
        | EJEY:ch                                       {:
                                                            RESULT=ch;
                                                        :}
        | PUNXY:ch                                      {:
                                                            RESULT=ch;
                                                        :}
        | TITUX:ch                                      {:
                                                            RESULT=ch;
                                                        :}
        | TITUY:ch                                      {:
                                                            RESULT=ch;
                                                        :};
ID::= id dp VALUE:val                                   {:
                                                            Nodo temp = new Nodo("ID","ID");
                                                            temp.add((Nodo)val);
                                                            RESULT=temp;
                                                        :};
TITULO::= titu dp VALUE:val                             {:
                                                            Nodo temp = new Nodo("TITULO","TITULO");
                                                            temp.add((Nodo)val);
                                                            RESULT=temp;
                                                        :};
EJEX::= ejx dp corA ARRAY:arr corC                      {:
                                                            Nodo temp = new Nodo("EJE_X","EJE_X");
                                                            temp.add((Nodo)arr);
                                                            RESULT=temp;
                                                        :};
EJEY::= ejy dp corA ARRAY:arr corC                      {:
                                                            Nodo temp = new Nodo("EJE_Y","EJE_Y");
                                                            temp.add((Nodo)arr);
                                                            RESULT=temp;
                                                        :};
PUNXY::= puxy dp corA ARRAYS:arr corC                   {:
                                                            Nodo temp = new Nodo("PUNTOS_XY","PUNTOS_XY");
                                                            temp.add((Nodo)arr);
                                                            RESULT=temp;
                                                        :}
        |error corC;
TITUX::= titx dp VALUE:val                              {:
                                                            Nodo temp = new Nodo("TITULO_X","TITULO_X");
                                                            temp.add((Nodo)val);
                                                            RESULT=temp;
                                                        :};
TITUY::= tity dp VALUE:val                              {:
                                                            Nodo temp = new Nodo("TITULO_Y","TITULO_Y");
                                                            temp.add((Nodo)val);
                                                            RESULT=temp;
                                                        :};
VALUE::= cad:val                                        {:
                                                            RESULT = new Nodo("CADENA",val.toString());
                                                        :}
       | iden:val                                       {:
                                                            RESULT = new Nodo("ID",val.toString());
                                                        :}
       | OPER:val                                       {:
                                                            RESULT = (Nodo)val;
                                                        :};
ARRAY::= ARRAY:ass coma VALUE:as                        {:
                                                            Nodo temp = new Nodo("ARRAY","ARRAY");
                                                            temp.setHijos((Nodo)ass);
                                                            temp.add((Nodo)as);
                                                            RESULT=temp;
                                                        :}
        | VALUE:as                                      {:
                                                            Nodo temp = new Nodo("ARRAY","ARRAY");
                                                            temp.add((Nodo)as);
                                                            RESULT=temp;
                                                        :};
ARRAYS::= ARRAYS:ass coma DUO:as                        {:
                                                            Nodo temp = new Nodo("INT,INT","INT,INT");
                                                            temp.setHijos((Nodo)ass);
                                                            temp.add((Nodo)as);
                                                            RESULT=temp;
                                                        :}
        | DUO:as                                        {:
                                                            Nodo temp = new Nodo("INT,INT","INT,INT");
                                                            temp.add((Nodo)as);
                                                            RESULT=temp;
                                                        :};
DUO::= llavA OPER:op1 coma OPER:op2 llavC               {:
                                                            Nodo temp = new Nodo("INT,INT","INT,INT");
                                                            temp.add((Nodo)op1);
                                                            temp.add((Nodo)op2);
                                                            RESULT=temp;
                                                        :};


DEF_GL::=def_gl llavA ASIGS:as llavC                    {:
                                                            RESULT=as;
                                                        :};

ASIGS::= ASIGS:ass ASIG:as pyc                          {:
                                                            Nodo temp = new Nodo("ASIG","ASIG");
                                                            temp.setHijos((Nodo)ass);
                                                            temp.add((Nodo)as);
                                                            RESULT=temp;
                                                        :}
       | ASIG:as pyc                                    {:
                                                            Nodo temp = new Nodo("ASIG","ASIG");
                                                            temp.add((Nodo)as);
                                                            RESULT=temp;
                                                        :}
       | error pyc;
ASIG::= TIPO:ti iden:id igu VALUE:val                   {:
                                                            Nodo ide = new Nodo("ID",id.toString(),idright+1,idleft);
                                                            Nodo temp = new Nodo("ASIG","ASIG");
                                                            temp.add((Nodo)ti);
                                                            temp.add(ide);
                                                            temp.add((Nodo)val);
                                                            RESULT=temp;
                                                        :};
TIPO::= r_str:val                                       {:
                                                            RESULT = new Nodo("TIPO","string");
                                                        :}
      | r_int:val                                       {:
                                                            RESULT = new Nodo("TIPO","int");
                                                        :};
OPER::= OPER:op1 mas OPER:op2                           {:
                                                            Nodo temp = new Nodo("SUMA","+");
                                                            temp.add((Nodo)op1);
                                                            temp.add((Nodo)op2);
                                                            RESULT=temp;
                                                        :}
      | OPER:op1 men OPER:op2                           {:
                                                            Nodo temp = new Nodo("RESTA","-");
                                                            temp.add((Nodo)op1);
                                                            temp.add((Nodo)op2);
                                                            RESULT=temp;
                                                        :}
      | OPER:op1 por OPER:op2                           {:
                                                            Nodo temp = new Nodo("MULT","*");
                                                            temp.add((Nodo)op1);
                                                            temp.add((Nodo)op2);
                                                            RESULT=temp;
                                                        :}
      | OPER:op1 div OPER:op2                           {:
                                                            Nodo temp = new Nodo("DIVI","/");
                                                            temp.add((Nodo)op1);
                                                            temp.add((Nodo)op2);
                                                            RESULT=temp;
                                                        :}
      | parA OPER:op parC                               {:
                                                            RESULT=op;
                                                        :}
      | num:n                                           {:
                                                            RESULT = new Nodo("NUME",n.toString());
                                                        :};


INICIO::= COMPI:temp                                    {:
                                                            raiz.add((Nodo)temp);
                                                        :};
COMPI::= com_a  com_c                    {::}
       | error com_c;

COMPI::= com_a CABECERA CUERPO com_c                    {::}
       | com_a CUERPO CABECERA com_c                    {::};
CABECERA::=cab_a TITULO cab_c                           {::};
TITULO::=tit_a texto tit_c                              {::};
CUERPO::=cue_a cie cue_c                                {::};





//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------> Expresiones Regulares
com = <![^(!>)]*!>
comm = \/\*[^(\*\/)]*\*\/
commm = \/\/[^\n]*
num = [0-9]+
dec =[0-9]+"."[0-9]+
cad = \"[^\"]*\"
idvar = \$([a-zA-ZñÑ])([a-zA-ZñÑ]|[0-9]|_)*
idobj = #([a-zA-ZñÑ])([a-zA-ZñÑ]|[0-9]|_)*
texto = [^<]+
//ESTADOS
//%state SCRIPTHS
%%
/*-------------------- 3ra Area: Reglas Lexicas --------------------*/
//-------------------> Palabras Reservadas
<YYINITIAL> "<Compi>"           {System.out.println("com_a");return new Symbol(Simbolos.com_a,yycolumn, yyline, yytext());}
<YYINITIAL> "</Compi>"          {System.out.println("com_c");return new Symbol(Simbolos.com_c,yycolumn, yyline, yytext());}
<YYINITIAL> "<Cabecera>"        {System.out.println("cab_a");return new Symbol(Simbolos.cab_a,yycolumn, yyline, yytext());}
<YYINITIAL> "</Cabecera>"       {System.out.println("cab_c");return new Symbol(Simbolos.cab_c,yycolumn, yyline, yytext());}
<YYINITIAL> "<Titulo>"          {System.out.println("tit_a");return new Symbol(Simbolos.tit_a,yycolumn, yyline, yytext());}
<YYINITIAL> "</Titulo>"         {System.out.println("tit_c");return new Symbol(Simbolos.tit_c,yycolumn, yyline, yytext());}
<YYINITIAL> "<Cuerpo"           {System.out.println("cue_a");return new Symbol(Simbolos.cue_a,yycolumn, yyline, yytext());}
<YYINITIAL> "</Cuerpo>"         {System.out.println("cue_c");return new Symbol(Simbolos.cue_c,yycolumn, yyline, yytext());}
<YYINITIAL> "<Espacio>"         {System.out.println("esp_a");return new Symbol(Simbolos.esp_a,yycolumn, yyline, yytext());}
<YYINITIAL> "</Espacio>"        {System.out.println("esp_c");return new Symbol(Simbolos.esp_c,yycolumn, yyline, yytext());}
<YYINITIAL> "<Parrafo"          {System.out.println("par_a");return new Symbol(Simbolos.par_a,yycolumn, yyline, yytext());}
<YYINITIAL> "</Parrafo>"        {System.out.println("par_c");return new Symbol(Simbolos.par_c,yycolumn, yyline, yytext());}

<YYINITIAL> "</Salto>"          {System.out.println("salt"); return new Symbol(Simbolos.salt,yycolumn, yyline, yytext());}
<YYINITIAL> "<TextoA>"          {System.out.println("tea_a");return new Symbol(Simbolos.tea_a,yycolumn, yyline, yytext());}
<YYINITIAL> "</TextoA>"         {System.out.println("tea_c");return new Symbol(Simbolos.tea_c,yycolumn, yyline, yytext());}
<YYINITIAL> "<TextoB>"          {System.out.println("teb_a");return new Symbol(Simbolos.teb_a,yycolumn, yyline, yytext());}
<YYINITIAL> "</TextoB>"         {System.out.println("teb_c");return new Symbol(Simbolos.teb_c,yycolumn, yyline, yytext());}
<YYINITIAL> "<Imagen"           {System.out.println("ima_a");return new Symbol(Simbolos.ima_a,yycolumn, yyline, yytext());}
<YYINITIAL> "</Imagen>"         {System.out.println("ima_c");return new Symbol(Simbolos.ima_c,yycolumn, yyline, yytext());}
<YYINITIAL> "<Boton>"           {System.out.println("bot_a");return new Symbol(Simbolos.bot_a,yycolumn, yyline, yytext());}
<YYINITIAL> "</Boton>"          {System.out.println("bot_c");return new Symbol(Simbolos.bot_c,yycolumn, yyline, yytext());}

<YYINITIAL> "<Tabla>"           {System.out.println("tab_a"); return new Symbol(Simbolos.tab_a,yycolumn, yyline, yytext());}
<YYINITIAL> "</Tabla>"          {System.out.println("tab_c"); return new Symbol(Simbolos.tab_c,yycolumn, yyline, yytext());}
<YYINITIAL> "<Fila>"            {System.out.println("fil_a"); return new Symbol(Simbolos.fil_a,yycolumn, yyline, yytext());}
<YYINITIAL> "</Fila>"           {System.out.println("fil_c"); return new Symbol(Simbolos.fil_c,yycolumn, yyline, yytext());}
<YYINITIAL> "<ColumnaC>"        {System.out.println("colc_a");return new Symbol(Simbolos.colc_a,yycolumn, yyline, yytext());}
<YYINITIAL> "</ColumnaC>"       {System.out.println("colc_c");return new Symbol(Simbolos.colc_c,yycolumn, yyline, yytext());}
<YYINITIAL> "<Columna>"         {System.out.println("col_a"); return new Symbol(Simbolos.col_a,yycolumn, yyline, yytext());}
<YYINITIAL> "</Columna>"        {System.out.println("col_c"); return new Symbol(Simbolos.col_c,yycolumn, yyline, yytext());}

<YYINITIAL> "true"              {System.out.println("tru");  return new Symbol(Simbolos.tru,yycolumn, yyline, yytext());}
<YYINITIAL> "false"             {System.out.println("fals"); return new Symbol(Simbolos.fals,yycolumn, yyline, yytext());}
<YYINITIAL> "fondo"             {System.out.println("fond"); return new Symbol(Simbolos.fond,yycolumn, yyline, yytext());}
<YYINITIAL> "alineacion"        {System.out.println("alin"); return new Symbol(Simbolos.alin,yycolumn, yyline, yytext());}
<YYINITIAL> "path"              {System.out.println("path"); return new Symbol(Simbolos.path,yycolumn, yyline, yytext());}
<YYINITIAL> "alto"              {System.out.println("alto"); return new Symbol(Simbolos.alto,yycolumn, yyline, yytext());}
<YYINITIAL> "ancho"             {System.out.println("anch"); return new Symbol(Simbolos.anch,yycolumn, yyline, yytext());}
<YYINITIAL> "id"                {System.out.println("ide");  return new Symbol(Simbolos.ide,yycolumn, yyline, yytext());}
<YYINITIAL> "texto"             {System.out.println("text"); return new Symbol(Simbolos.text,yycolumn, yyline, yytext());}
<YYINITIAL> "borde"             {System.out.println("bord"); return new Symbol(Simbolos.bord,yycolumn, yyline, yytext());}

<YYINITIAL> "<?hs"              {System.out.println("hs_a");yybegin(SCRIPTHS);return new Symbol(Simbolos.hs_a,yycolumn, yyline, yytext());}
/*
<SCRIPTHS> "echo"               {System.out.println("echo");return new Symbol(Simbolos.echo,yycolumn, yyline, yytext());}
<SCRIPTHS> "if"                 {System.out.println("ife");return new Symbol(Simbolos.ife,yycolumn, yyline, yytext());}
<SCRIPTHS> "else"               {System.out.println("elsee");return new Symbol(Simbolos.elsee,yycolumn, yyline, yytext());}
<SCRIPTHS> "repetir"            {System.out.println("repet");return new Symbol(Simbolos.repet,yycolumn, yyline, yytext());}

<SCRIPTHS> "insertar"           {System.out.println("inser");return new Symbol(Simbolos.inser,yycolumn, yyline, yytext());}
<SCRIPTHS> "CrearParrafo"       {System.out.println("cre_par");return new Symbol(Simbolos.cre_par,yycolumn, yyline, yytext());}
<SCRIPTHS> "setAlineacion"      {System.out.println("setA");return new Symbol(Simbolos.setA,yycolumn, yyline, yytext());}
<SCRIPTHS> "getAlineacion"      {System.out.println("getA");return new Symbol(Simbolos.getA,yycolumn, yyline, yytext());}
<SCRIPTHS> "setContenido"       {System.out.println("setC");return new Symbol(Simbolos.setC,yycolumn, yyline, yytext());}
<SCRIPTHS> "getContenido"       {System.out.println("getC");return new Symbol(Simbolos.getC,yycolumn, yyline, yytext());}

<SCRIPTHS> "CrearTextoA"        {System.out.println("cre_tea");return new Symbol(Simbolos.cre_tea,yycolumn, yyline, yytext());}
<SCRIPTHS> "CrearTextoB"        {System.out.println("cre_teb");return new Symbol(Simbolos.cre_teb,yycolumn, yyline, yytext());}

<SCRIPTHS> "CrearImagen"        {System.out.println("gre_img");return new Symbol(Simbolos.cre_img,yycolumn, yyline, yytext());}
<SCRIPTHS> "setPath"            {System.out.println("setP");return new Symbol(Simbolos.setP ,yycolumn, yyline, yytext());}
<SCRIPTHS> "getPath"            {System.out.println("getP");return new Symbol(Simbolos.getP ,yycolumn, yyline, yytext());}
<SCRIPTHS> "setAlto"            {System.out.println("setAl");return new Symbol(Simbolos.setAl,yycolumn, yyline, yytext());}
<SCRIPTHS> "getAlto"            {System.out.println("getAl");return new Symbol(Simbolos.getAl,yycolumn, yyline, yytext());}
<SCRIPTHS> "setAncho"           {System.out.println("setAn");return new Symbol(Simbolos.setAn,yycolumn, yyline, yytext());}
<SCRIPTHS> "getAncho"           {System.out.println("getAn");return new Symbol(Simbolos.getAn,yycolumn, yyline, yytext());}

<SCRIPTHS> "CrearTabla"         {System.out.println("echo");return new Symbol(Simbolos.cre_tab,yycolumn, yyline, yytext());}
<SCRIPTHS> "setBorde"           {System.out.println("echo");return new Symbol(Simbolos.setBo,yycolumn, yyline, yytext());}

<SCRIPTHS> "CrearBoton"         {System.out.println("echo");return new Symbol(Simbolos.cre_bot,yycolumn, yyline, yytext());}
<SCRIPTHS> "setTexto"           {System.out.println("echo");return new Symbol(Simbolos.setT,yycolumn, yyline, yytext());}
<SCRIPTHS> "getTexto"           {System.out.println("echo");return new Symbol(Simbolos.getT,yycolumn, yyline, yytext());}
<SCRIPTHS> "ClickBoton"         {System.out.println("echo");return new Symbol(Simbolos.cli_bot,yycolumn, yyline, yytext());}

<SCRIPTHS> "true"               {System.out.println("tru");return new Symbol(Simbolos.tru,yycolumn, yyline, yytext());}
<SCRIPTHS> "false"              {System.out.println("fals");return new Symbol(Simbolos.fals,yycolumn, yyline, yytext());}

<SCRIPTHS> "?>"                 {System.out.println("hs_c");yybegin(YYINITIAL);return new Symbol(Simbolos.hs_c,yycolumn, yyline, yytext());}

*/
//-------------------> Simbolos Especiales
/*
<SCRIPTHS> "+"             {System.out.println(yytext()+" | mas");return new Symbol(Simbolos.mas,yycolumn, yyline, yytext());}
<SCRIPTHS> "-"             {System.out.println(yytext()+" | men");return new Symbol(Simbolos.men,yycolumn, yyline, yytext());}
<SCRIPTHS> "*"             {System.out.println(yytext()+" | por");return new Symbol(Simbolos.por,yycolumn, yyline, yytext());}
<SCRIPTHS> "/"             {System.out.println(yytext()+" | div");return new Symbol(Simbolos.div,yycolumn, yyline, yytext());}
<SCRIPTHS> "="             {System.out.println(yytext()+" | igu");return new Symbol(Simbolos.igu,yycolumn, yyline, yytext());}
<SCRIPTHS> ","             {System.out.println(yytext()+" | igu");return new Symbol(Simbolos.coma,yycolumn, yyline, yytext());}
<SCRIPTHS> "."             {System.out.println(yytext()+" | igu");return new Symbol(Simbolos.pun,yycolumn, yyline, yytext());}
<SCRIPTHS> ";"             {System.out.println(yytext()+" | pyc");return new Symbol(Simbolos.pyc,yycolumn, yyline, yytext());}
<SCRIPTHS> "("             {System.out.println(yytext()+" | para");return new Symbol(Simbolos.parA,yycolumn, yyline, yytext());}
<SCRIPTHS> ")"             {System.out.println(yytext()+" | parc");return new Symbol(Simbolos.parC,yycolumn, yyline, yytext());}
<SCRIPTHS> "{"             {System.out.println(yytext()+" | llava");return new Symbol(Simbolos.llavA,yycolumn, yyline, yytext());}
<SCRIPTHS> "}"             {System.out.println(yytext()+" | llavc");return new Symbol(Simbolos.llavC,yycolumn, yyline, yytext());}
<SCRIPTHS> "["             {System.out.println(yytext()+" | cora");return new Symbol(Simbolos.corA,yycolumn, yyline, yytext());}
<SCRIPTHS> "]"             {System.out.println(yytext()+" | corc");return new Symbol(Simbolos.corC,yycolumn, yyline, yytext());}
<SCRIPTHS> "<="             {System.out.println(yytext()+" | para");return new Symbol(Simbolos.lesigu,yycolumn, yyline, yytext());}
<SCRIPTHS> ">="             {System.out.println(yytext()+" | parc");return new Symbol(Simbolos.greigu,yycolumn, yyline, yytext());}
<SCRIPTHS> "<"             {System.out.println(yytext()+" | llava");return new Symbol(Simbolos.les,yycolumn, yyline, yytext());}
<SCRIPTHS> ">"             {System.out.println(yytext()+" | llavc");return new Symbol(Simbolos.gre,yycolumn, yyline, yytext());}
<SCRIPTHS> "!="             {System.out.println(yytext()+" | cora");return new Symbol(Simbolos.diff,yycolumn, yyline, yytext());}
<SCRIPTHS> "=="             {System.out.println(yytext()+" | corc");return new Symbol(Simbolos.igua,yycolumn, yyline, yytext());}
<SCRIPTHS> "&&"             {System.out.println(yytext()+" | llavc");return new Symbol(Simbolos.and,yycolumn, yyline, yytext());}
<SCRIPTHS> "||"             {System.out.println(yytext()+" | cora");return new Symbol(Simbolos.or,yycolumn, yyline, yytext());}
<SCRIPTHS> "!"             {System.out.println(yytext()+" | corc");return new Symbol(Simbolos.not,yycolumn, yyline, yytext());}
*/
<YYINITIAL> "="             {System.out.println(yytext()+" | quea");return new Symbol(Simbolos.igu,yycolumn, yyline, yytext());}
<YYINITIAL> ">"             {System.out.println(yytext()+" | quec");return new Symbol(Simbolos.cie,yycolumn, yyline, yytext());}

//-------------------> Expresiones Regulares
/*
<SCRIPTHS> {num}            {System.out.println(yytext()+" | texto");return new Symbol(Simbolos.num,yycolumn, yyline, yytext());}
<SCRIPTHS> {dec}            {System.out.println(yytext()+" | cad");return new Symbol(Simbolos.dec,yycolumn, yyline, yytext());}
<SCRIPTHS> {cad}            {System.out.println(yytext()+" | num");return new Symbol(Simbolos.cad,yycolumn, yyline, yytext());}
<SCRIPTHS> {idvar}          {System.out.println(yytext()+" | num");return new Symbol(Simbolos.idvar,yycolumn, yyline, yytext());}
<SCRIPTHS> {idobj}          {System.out.println(yytext()+" | iden");return new Symbol(Simbolos.idobj,yycolumn, yyline, yytext());}
*/
<YYINITIAL> {texto}         {System.out.println(yytext()+" | num");return new Symbol(Simbolos.texto,yycolumn, yyline, yytext());}
<YYINITIAL> {cad}           {System.out.println(yytext()+" | num");return new Symbol(Simbolos.cad,yycolumn, yyline, yytext());}
<YYINITIAL> {com}           {}
/*
<SCRIPTHS> {comm}           {}
<SCRIPTHS> {commm}          {}
*/
//------------------> Espacios en blanco
<YYINITIAL>[ \t\r\n\f]      {/* Espacios en blanco */}
//<SCRIPTHS>[ \t\r\n\f]      {/* Espacios en blanco */}
//------------------> Errores Lexicos
<YYINITIAL>.                {
                                System.out.println("Error Lexico '"+yytext()+"' Linea "+yyline+1+" Columna "+yycolumn);
                                //err.addE("LEXICO", yytext(), yyline+1, yycolumn, "Simbolo fuera de este lenguaje");
                            }
/*<SCRIPTHS>.                {
                                System.out.println("Error Lexico '"+yytext()+"' Linea "+yyline+1+" Columna "+yycolumn);
                                //err.addE("LEXICO", yytext(), yyline+1, yycolumn, "Simbolo fuera de este lenguaje");
                            }
*/

